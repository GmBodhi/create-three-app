import "./style.css"; // For webpack support

import {
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Scene,
  Color,
  Fog,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  TextureLoader,
  MeshLambertMaterial,
  DoubleSide,
  ParametricBufferGeometry,
  Mesh,
  SphereGeometry,
  MeshLambertMaterial,
  Mesh,
  RepeatWrapping,
  sRGBEncoding,
  MeshLambertMaterial,
  Mesh,
  PlaneGeometry,
  BoxGeometry,
  MeshLambertMaterial,
  Mesh,
  Mesh,
  Mesh,
  BoxGeometry,
  BoxGeometry,
  Mesh,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  DirectionalLight,
  Plane,
  Vector3,
  Plane,
  Vector3,
  MeshPhongMaterial,
  DoubleSide,
  TorusKnotGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  MeshPhongMaterial,
  WebGLRenderer,
  Plane,
  Plane,
  Vector3,
  Vector3,
  Vector3,
  Matrix4,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  DirectionalLight,
  MeshPhongMaterial,
  DoubleSide,
  Group,
  BoxGeometry,
  Mesh,
  PlaneGeometry,
  Color,
  Group,
  MeshBasicMaterial,
  DoubleSide,
  Mesh,
  Mesh,
  MeshPhongMaterial,
  WebGLRenderer,
  Matrix4,
  Matrix4,
  Plane,
  Vector3,
  Plane,
  Vector3,
  Plane,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  HemisphereLight,
  CameraHelper,
  Group,
  SphereGeometry,
  MeshLambertMaterial,
  Color,
  DoubleSide,
  Mesh,
  Group,
  PlaneHelper,
  PlaneHelper,
  PlaneHelper,
  Group,
  MeshBasicMaterial,
  AlwaysStencilFunc,
  BackSide,
  IncrementWrapStencilOp,
  IncrementWrapStencilOp,
  IncrementWrapStencilOp,
  Mesh,
  FrontSide,
  DecrementWrapStencilOp,
  DecrementWrapStencilOp,
  DecrementWrapStencilOp,
  Mesh,
  Clock,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  Plane,
  Vector3,
  Plane,
  Vector3,
  Plane,
  Vector3,
  PlaneHelper,
  TorusKnotGeometry,
  Group,
  PlaneGeometry,
  Group,
  MeshStandardMaterial,
  NotEqualStencilFunc,
  ReplaceStencilOp,
  ReplaceStencilOp,
  ReplaceStencilOp,
  Mesh,
  MeshStandardMaterial,
  DoubleSide,
  Mesh,
  Mesh,
  PlaneGeometry,
  ShadowMaterial,
  DoubleSide,
  WebGLRenderer,
  Vector3,
  Vector3,
  Vector2,
  TextureLoader,
  MeshPhongMaterial,
  Vector2,
  Vector3,
  Euler,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  BufferGeometry,
  Vector3,
  Vector3,
  Line,
  LineBasicMaterial,
  Raycaster,
  Mesh,
  BoxGeometry,
  MeshNormalMaterial,
  MeshPhongMaterial,
  Mesh,
  DepthFormat,
  UnsignedShortType,
  DepthFormat,
  DepthStencilFormat,
  UnsignedShortType,
  UnsignedIntType,
  UnsignedInt248Type,
  WebGLRenderer,
  PerspectiveCamera,
  WebGLRenderTarget,
  RGBFormat,
  NearestFilter,
  NearestFilter,
  DepthStencilFormat,
  DepthTexture,
  OrthographicCamera,
  ShaderMaterial,
  PlaneGeometry,
  Mesh,
  Scene,
  Scene,
  TorusKnotGeometry,
  MeshBasicMaterial,
  Mesh,
  Vector2,
  Color,
  PerspectiveCamera,
  OrthographicCamera,
  Scene,
  Scene,
  BufferGeometry,
  Float32BufferAttribute,
  BufferAttribute,
  DynamicDrawUsage,
  LineBasicMaterial,
  Line,
  DataTexture,
  RGBFormat,
  NearestFilter,
  NearestFilter,
  SpriteMaterial,
  Sprite,
  WebGLRenderer,
  Scene,
  Color,
  Scene,
  PerspectiveCamera,
  OrthographicCamera,
  Sprite,
  SpriteMaterial,
  CanvasTexture,
  Mesh,
  MeshLambertMaterial,
  DoubleSide,
  PointLight,
  WebGLRenderer,
  BufferGeometryLoader,
  Float32BufferAttribute,
  PerspectiveCamera,
  Scene,
  Color,
  AmbientLight,
  DirectionalLight,
  Group,
  Vector4,
  MathUtils,
  BufferGeometry,
  LineBasicMaterial,
  Line,
  BufferGeometry,
  LineBasicMaterial,
  Line,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  TextureLoader,
  RepeatWrapping,
  ParametricBufferGeometry,
  MeshLambertMaterial,
  DoubleSide,
  Mesh,
  WebGLRenderer,
  Vector3,
  Raycaster,
  Vector2,
  Vector2,
  Vector2,
  BoxGeometry,
  Scene,
  Color,
  PerspectiveCamera,
  AmbientLight,
  SpotLight,
  PlaneGeometry,
  ShadowMaterial,
  Mesh,
  GridHelper,
  WebGLRenderer,
  BufferGeometry,
  BufferAttribute,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  MeshLambertMaterial,
  Mesh,
  Vector3,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  FogExp2,
  PlaneGeometry,
  CanvasTexture,
  ClampToEdgeWrapping,
  ClampToEdgeWrapping,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  Vector3,
  Vector3,
  Cache,
  PerspectiveCamera,
  Vector3,
  Scene,
  Color,
  Fog,
  DirectionalLight,
  PointLight,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Group,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  WebGLRenderer,
  FontLoader,
  TextGeometry,
  Mesh,
  Mesh,
  PerspectiveCamera,
  Scene,
  Color,
  FontLoader,
  LineBasicMaterial,
  DoubleSide,
  MeshBasicMaterial,
  DoubleSide,
  ShapeGeometry,
  Mesh,
  Object3D,
  BufferGeometry,
  Line,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  FontLoader,
  Color,
  MeshBasicMaterial,
  DoubleSide,
  MeshBasicMaterial,
  DoubleSide,
  ShapeGeometry,
  Mesh,
  Group,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  PointLight,
  PointLightHelper,
  GridHelper,
  PolarGridHelper,
  Group,
  BoxHelper,
  WireframeGeometry,
  LineSegments,
  BoxHelper,
  EdgesGeometry,
  LineSegments,
  BoxHelper,
  BoxHelper,
  BoxHelper,
  Vector3,
  Euler,
  Quaternion,
  Vector3,
  BufferGeometryLoader,
  MeshNormalMaterial,
  Matrix4,
  InstancedMesh,
  Matrix4,
  Mesh,
  Matrix4,
  Mesh,
  PerspectiveCamera,
  WebGLRenderer,
  sRGBEncoding,
  Scene,
  Color,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  BufferGeometry,
  Color,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  BufferAttribute,
  BufferAttribute,
  BufferAttribute,
  MeshPhongMaterial,
  DoubleSide,
  Mesh,
  Raycaster,
  Vector2,
  BufferGeometry,
  BufferAttribute,
  LineBasicMaterial,
  Line,
  WebGLRenderer,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Vector2,
  Vector3,
  PerspectiveCamera,
  Scene,
  Color,
  Scene,
  WebGLRenderTarget,
  AmbientLight,
  SpotLight,
  MeshBasicMaterial,
  MeshPhongMaterial,
  Float32BufferAttribute,
  Matrix4,
  Quaternion,
  Color,
  BoxGeometry,
  Vector3,
  Euler,
  Vector3,
  Mesh,
  Mesh,
  Mesh,
  BoxGeometry,
  MeshLambertMaterial,
  WebGLRenderer,
  Vector2,
  OrthographicCamera,
  Scene,
  Color,
  DirectionalLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  BufferGeometry,
  Vector3,
  Vector3,
  Float32BufferAttribute,
  Object3D,
  LineBasicMaterial,
  Line,
  LineSegments,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Scene,
  PerspectiveCamera,
  BoxGeometry,
  Color,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  ShaderMaterial,
  Color,
  TextureLoader,
  Points,
  WebGLRenderer,
  Raycaster,
  Vector2,
  Vector2,
  Matrix4,
  BufferGeometry,
  BufferAttribute,
  BufferAttribute,
  PointsMaterial,
  Points,
  BufferAttribute,
  PointsMaterial,
  Points,
  BufferAttribute,
  PointsMaterial,
  Points,
  Scene,
  Clock,
  PerspectiveCamera,
  Color,
  Color,
  Color,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  Raycaster,
  PerspectiveCamera,
  Scene,
  Color,
  BoxGeometry,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  MeshLambertMaterial,
  TextureLoader,
  GridHelper,
  Raycaster,
  Vector2,
  PlaneGeometry,
  Mesh,
  MeshBasicMaterial,
  AmbientLight,
  DirectionalLight,
  WebGLRenderer,
  Mesh,
  PerspectiveCamera,
  Scene,
  Color,
  PointLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  HemisphereLight,
  HemisphereLightHelper,
  DirectionalLight,
  DirectionalLightHelper,
  PlaneGeometry,
  MeshLambertMaterial,
  Mesh,
  Color,
  Color,
  SphereGeometry,
  ShaderMaterial,
  BackSide,
  Mesh,
  AnimationMixer,
  WebGLRenderer,
  sRGBEncoding,
  Clock,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PerspectiveCamera,
  Color,
  Vector3,
  CatmullRomCurve3,
  Vector3,
  Color,
  Line,
  BufferGeometry,
  LineBasicMaterial,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  LineBasicMaterial,
  LineDashedMaterial,
  Line,
  PerspectiveCamera,
  Vector3,
  Scene,
  Color,
  Fog,
  DirectionalLight,
  PointLight,
  MeshPhongMaterial,
  Group,
  Font,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  WebGLRenderer,
  TextGeometry,
  Mesh,
  Mesh,
  Vector3,
  Scene,
  Color,
  PerspectiveCamera,
  DirectionalLight,
  DirectionalLight,
  Group,
  WebGLRenderer,
  BoxGeometry,
  IcosahedronGeometry,
  Vector3,
  Color,
  MeshPhongMaterial,
  Mesh,
  Vector3,
  Vector3,
  Mesh,
  MeshPhongMaterial,
  PerspectiveCamera,
  WebGLRenderer,
  ACESFilmicToneMapping,
  PMREMGenerator,
  Scene,
  Color,
  Box3,
  Vector3,
  Vector3,
  Clock,
  PerspectiveCamera,
  Scene,
  Fog,
  PointLight,
  DirectionalLight,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  MeshLambertMaterial,
  LOD,
  Mesh,
  WebGLRenderer,
  TextureLoader,
  PerspectiveCamera,
  Scene,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  MeshBasicMaterial,
  Mesh,
  PlaneGeometry,
  NoBlending,
  NormalBlending,
  AdditiveBlending,
  SubtractiveBlending,
  MultiplyBlending,
  PlaneGeometry,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  WebGLRenderer,
  CanvasTexture,
  MeshBasicMaterial,
  PerspectiveCamera,
  Scene,
  TextureLoader,
  CanvasTexture,
  RepeatWrapping,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  MeshBasicMaterial,
  Mesh,
  PlaneGeometry,
  ZeroFactor,
  OneFactor,
  SrcColorFactor,
  OneMinusSrcColorFactor,
  SrcAlphaFactor,
  OneMinusSrcAlphaFactor,
  DstAlphaFactor,
  OneMinusDstAlphaFactor,
  DstColorFactor,
  OneMinusDstColorFactor,
  SrcAlphaSaturateFactor,
  ZeroFactor,
  OneFactor,
  SrcColorFactor,
  OneMinusSrcColorFactor,
  SrcAlphaFactor,
  OneMinusSrcAlphaFactor,
  DstAlphaFactor,
  OneMinusDstAlphaFactor,
  DstColorFactor,
  OneMinusDstColorFactor,
  PlaneGeometry,
  PlaneGeometry,
  MeshBasicMaterial,
  CustomBlending,
  AddEquation,
  Mesh,
  Mesh,
  Mesh,
  WebGLRenderer,
  AddEquation,
  SubtractEquation,
  ReverseSubtractEquation,
  MinEquation,
  MaxEquation,
  CanvasTexture,
  MeshBasicMaterial,
  FrontSide,
  BackSide,
  DoubleSide,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  OrthographicCamera,
  AmbientLight,
  PointLight,
  PointLight,
  PointLight,
  TextureLoader,
  MeshStandardMaterial,
  Vector2,
  DoubleSide,
  MeshDepthMaterial,
  BasicDepthPacking,
  DoubleSide,
  MeshDepthMaterial,
  RGBADepthPacking,
  DoubleSide,
  MeshNormalMaterial,
  Vector2,
  DoubleSide,
  Mesh,
  FrontSide,
  BackSide,
  DoubleSide,
  CubeTextureLoader,
  LinearMipMapLinearFilter,
  LinearFilter,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  WebGLRenderer,
  ACESFilmicToneMapping,
  TorusKnotGeometry,
  SphereGeometry,
  MeshStandardMaterial,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  DefaultLoadingManager,
  UnsignedByteType,
  LinearFilter,
  CubeTextureLoader,
  sRGBEncoding,
  RGBM16Encoding,
  PMREMGenerator,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  DirectionalLight,
  Color,
  Color,
  SphereGeometry,
  ShaderMaterial,
  BackSide,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  ObjectLoader,
  PerspectiveCamera,
  Scene,
  Group,
  SphereGeometry,
  TextureLoader,
  sRGBEncoding,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  MeshPhysicalMaterial,
  Vector2,
  Mesh,
  MeshPhysicalMaterial,
  Mesh,
  MeshPhysicalMaterial,
  Vector2,
  Mesh,
  MeshPhysicalMaterial,
  Vector2,
  Vector2,
  Mesh,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  WebGLRenderer,
  ACESFilmicToneMapping,
  sRGBEncoding,
  EquirectangularReflectionMapping,
  WebGLRenderer,
  ACESFilmicToneMapping,
  sRGBEncoding,
  Scene,
  PerspectiveCamera,
  SphereGeometry,
  CanvasTexture,
  NearestFilter,
  RepeatWrapping,
  RepeatWrapping,
  MeshPhysicalMaterial,
  DoubleSide,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  ReinhardToneMapping,
  Scene,
  PerspectiveCamera,
  HemisphereLight,
  MeshStandardMaterial,
  TextureLoader,
  sRGBEncoding,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  EquirectangularReflectionMapping,
  Vector2,
  PerspectiveCamera,
  Scene,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  WebGLRenderer,
  CanvasTexture,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Scene,
  Color,
  Fog,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  NearestFilter,
  NearestFilter,
  MeshBasicMaterial,
  MeshBasicMaterial,
  PlaneGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  Mesh,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
  TextureLoader,
  Texture,
  MeshBasicMaterial,
  MeshBasicMaterial,
  NearestFilter,
  LinearFilter,
  UVMapping,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Scene,
  Color,
  Fog,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  NearestFilter,
  NearestMipmapNearestFilter,
  MeshBasicMaterial,
  MeshBasicMaterial,
  PlaneGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  Mesh,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
  TextureLoader,
  Texture,
  MeshBasicMaterial,
  MeshBasicMaterial,
  NearestFilter,
  LinearFilter,
  UVMapping,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  DirectionalLight,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  WebGLRenderer,
  sRGBEncoding,
  TextureLoader,
  RepeatWrapping,
  UniformsUtils,
  Vector3,
  Vector3,
  ShaderMaterial,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  BufferGeometryLoader,
  MeshBasicMaterial,
  Mesh,
  ShaderMaterial,
  DoubleSide,
  Mesh,
  Vector3,
  Vector3,
  Vector3,
  BufferAttribute,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  Clock,
  Raycaster,
  HemisphereLight,
  Vector3,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  Vector3,
  Spherical,
  Matrix4,
  Quaternion,
  Clock,
  PerspectiveCamera,
  Scene,
  ConeGeometry,
  MeshNormalMaterial,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  CircleGeometry,
  PlaneGeometry,
  Object3D,
  CylinderGeometry,
  MeshPhongMaterial,
  Mesh,
  SphereGeometry,
  Mesh,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  Plane,
  Vector3,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  PerspectiveCamera,
  CameraHelper,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  DirectionalLight,
  AnimationMixer,
  WebGLRenderer,
  sRGBEncoding,
  MathUtils,
  MathUtils,
  BoxGeometry,
  SphereGeometry,
  DodecahedronGeometry,
  CylinderGeometry,
  Scene,
  PerspectiveCamera,
  MeshStandardMaterial,
  Color,
  Mesh,
  HemisphereLight,
  DirectionalLight,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  Color,
  BufferGeometry,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  CanvasTexture,
  PointsMaterial,
  Points,
  PerspectiveCamera,
  Vector3,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  Texture,
  ImageLoader,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  TextureLoader,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  PerspectiveCamera,
  Scene,
  FogExp2,
  BufferGeometry,
  TextureLoader,
  Float32BufferAttribute,
  PointsMaterial,
  Points,
  WebGLRenderer,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  FogExp2,
  WebGLRenderer,
  Object3D,
  Points,
  PlaneGeometry,
  PointsMaterial,
  BufferAttribute,
  BufferGeometry,
  DynamicDrawUsage,
  Points,
  PointsMaterial,
  PerspectiveCamera,
  Scene,
  FogExp2,
  BufferGeometry,
  TextureLoader,
  Float32BufferAttribute,
  PointsMaterial,
  AdditiveBlending,
  Points,
  WebGLRenderer,
  Points,
  PerspectiveCamera,
  Scene,
  BufferGeometry,
  BufferAttribute,
  BufferAttribute,
  ShaderMaterial,
  Color,
  Points,
  WebGLRenderer,
  OrthographicCamera,
  Scene,
  Scene,
  DirectionalLight,
  DirectionalLight,
  WebGLRenderTarget,
  LinearFilter,
  NearestFilter,
  RGBAFormat,
  FloatType,
  ShaderMaterial,
  ShaderMaterial,
  PlaneGeometry,
  Mesh,
  TorusGeometry,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  Mesh,
  WebGLRenderer,
  Clock,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  TextureLoader,
  RepeatWrapping,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  PlaneGeometry,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  PerspectiveCamera,
  OrthographicCamera,
  Scene,
  Scene,
  Scene,
  DirectionalLight,
  DirectionalLight,
  WebGLRenderTarget,
  LinearFilter,
  NearestFilter,
  RGBFormat,
  ShaderMaterial,
  ShaderMaterial,
  PlaneGeometry,
  Mesh,
  TorusGeometry,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  ACESFilmicToneMapping,
  Scene,
  PerspectiveCamera,
  Vector3,
  PlaneGeometry,
  TextureLoader,
  RepeatWrapping,
  Vector3,
  PMREMGenerator,
  MathUtils,
  MathUtils,
  BoxGeometry,
  MeshStandardMaterial,
  Mesh,
  Vector3,
  MathUtils,
  MathUtils,
  PerspectiveCamera,
  Scene,
  GridHelper,
  WebGLRenderer,
  sRGBEncoding,
  ACESFilmicToneMapping,
  PerspectiveCamera,
  PerspectiveCamera,
  OrthographicCamera,
  Scene,
  Scene,
  Scene,
  AmbientLight,
  DirectionalLight,
  BackSide,
  AdditiveBlending,
  UniformsUtils,
  UniformsLib,
  UniformsLib,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderMaterial,
  MeshPhongMaterial,
  TextureLoader,
  sRGBEncoding,
  sRGBEncoding,
  sRGBEncoding,
  MeshBasicMaterial,
  AdditiveBlending,
  sRGBEncoding,
  MeshLambertMaterial,
  NormalBlending,
  SphereGeometry,
  Mesh,
  Mesh,
  Mesh,
  Mesh,
  ShaderMaterial,
  NoBlending,
  ShaderMaterial,
  NoBlending,
  Mesh,
  PlaneGeometry,
  Mesh,
  PlaneGeometry,
  CubeTextureLoader,
  sRGBEncoding,
  WebGLRenderer,
  LinearFilter,
  LinearFilter,
  RGBAFormat,
  WebGLRenderTarget,
  FloatType,
  WebGLRenderTarget,
  Clock,
  PerspectiveCamera,
  Scene,
  Fog,
  WebGLCubeRenderTarget,
  RGBFormat,
  LinearMipmapLinearFilter,
  sRGBEncoding,
  CubeCamera,
  TextureLoader,
  RepeatWrapping,
  NearestFilter,
  sRGBEncoding,
  RepeatWrapping,
  sRGBEncoding,
  RepeatWrapping,
  sRGBEncoding,
  MeshPhongMaterial,
  PlaneGeometry,
  Mesh,
  MeshPhongMaterial,
  MeshPhongMaterial,
  MeshPhongMaterial,
  SphereGeometry,
  TorusGeometry,
  BoxGeometry,
  MeshPhongMaterial,
  Mesh,
  BoxGeometry,
  BoxGeometry,
  BoxGeometry,
  BoxGeometry,
  BoxGeometry,
  SphereGeometry,
  AnimationMixer,
  AmbientLight,
  PointLight,
  DirectionalLight,
  CameraHelper,
  WebGLRenderer,
  PCFSoftShadowMap,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  Color,
  BoxGeometry,
  IcosahedronGeometry,
  TorusKnotGeometry,
  MeshNormalMaterial,
  Mesh,
  Group,
  WebGLRenderTarget,
  WebGLRenderTarget,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  OrthographicCamera,
  CameraHelper,
  MeshDepthMaterial,
  ShaderMaterial,
  ShaderMaterial,
  Color,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  CameraHelper,
  DirectionalLight,
  CameraHelper,
  TorusKnotGeometry,
  MeshPhongMaterial,
  Mesh,
  BoxGeometry,
  Mesh,
  BoxGeometry,
  MeshPhongMaterial,
  Mesh,
  WebGLRenderer,
  BasicShadowMap,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Clock,
  PlaneGeometry,
  MeshPhongMaterial,
  Mesh,
  GridHelper,
  HemisphereLight,
  DirectionalLight,
  AnimationMixer,
  WebGLRenderer,
  NoToneMapping,
  LinearToneMapping,
  ReinhardToneMapping,
  CineonToneMapping,
  ACESFilmicToneMapping,
  CustomToneMapping,
  WebGLRenderer,
  sRGBEncoding,
  ShaderChunk,
  ShaderChunk,
  Scene,
  PerspectiveCamera,
  EquirectangularReflectionMapping,
  Clock,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  TextureLoader,
  RepeatWrapping,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Fog,
  BoxGeometry,
  MeshNormalMaterial,
  Mesh,
  PerspectiveCamera,
  Scene,
  WebGLRenderer,
  CubeTextureLoader,
  MeshBasicMaterial,
  SphereGeometry,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Vector2,
  Raycaster,
  Vector3,
  PerspectiveCamera,
  Scene,
  WebGLRenderer,
  ShaderMaterial,
  CubeTextureLoader,
  PlaneGeometry,
  MeshPhongMaterial,
  DoubleSide,
  Mesh,
  BufferGeometryLoader,
  MeshPhongMaterial,
  Mesh,
  SphereGeometry,
  MeshPhongMaterial,
  Mesh,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  Scene,
  OrthographicCamera,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  WebGLRenderTarget,
  WebGLRenderTarget,
  UniformsUtils,
  ShaderMaterial,
  Mesh,
  PlaneGeometry,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Clock,
  HemisphereLight,
  DirectionalLight,
  Group,
  TetrahedronGeometry,
  MeshStandardMaterial,
  Mesh,
  WebGLRenderer,
  Vector3,
  Vector4,
  Vector3,
  PerspectiveCamera,
  Scene,
  MeshDepthMaterial,
  MeshBasicMaterial,
  SphereGeometry,
  Mesh,
  WebGLRenderer,
  Scene,
  OrthographicCamera,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  WebGLRenderTarget,
  WebGLRenderTarget,
  WebGLRenderTarget,
  WebGLRenderTarget,
  WebGLRenderTarget,
  UniformsUtils,
  ShaderMaterial,
  UniformsUtils,
  ShaderMaterial,
  UniformsUtils,
  ShaderMaterial,
  UniformsUtils,
  ShaderMaterial,
  Mesh,
  PlaneGeometry,
} from "three";

import Stats from "three/examples/jsm/libs/stats.module.js";

import { OBJLoader } from "three/examples/jsm/loaders/OBJLoader.js";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
import {
  GodRaysFakeSunShader,
  GodRaysDepthMaskShader,
  GodRaysCombineShader,
  GodRaysGenerateShader,
} from "three/examples/jsm/shaders/GodRaysShader.js";

let container, stats;
let camera, scene, renderer, materialDepth;

let sphereMesh;

const sunPosition = new Vector3(0, 1000, -1000);
const clipPosition = new Vector4();
const screenSpacePosition = new Vector3();

const postprocessing = { enabled: true };

const orbitRadius = 200;

const bgColor = 0x000511;
const sunColor = 0xffee00;

// Use a smaller size for some of the god-ray render targets for better performance.
const godrayRenderTargetResolutionMultiplier = 1.0 / 4.0;

init();
animate();

function init() {
  container = document.createElement("div");
  document.body.appendChild(container);

  //

  camera = new PerspectiveCamera(
    70,
    window.innerWidth / window.innerHeight,
    1,
    3000
  );
  camera.position.z = 200;

  scene = new Scene();

  //

  materialDepth = new MeshDepthMaterial();

  const materialScene = new MeshBasicMaterial({ color: 0x000000 });

  // tree

  const loader = new OBJLoader();
  loader.load("models/obj/tree.obj", function (object) {
    object.material = materialScene;
    object.position.set(0, -150, -150);
    object.scale.multiplyScalar(400);
    scene.add(object);
  });

  // sphere

  const geo = new SphereGeometry(1, 20, 10);
  sphereMesh = new Mesh(geo, materialScene);
  sphereMesh.scale.multiplyScalar(20);
  scene.add(sphereMesh);

  //

  renderer = new WebGLRenderer();
  renderer.setClearColor(0xffffff);
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  container.appendChild(renderer.domElement);

  renderer.autoClear = false;

  const controls = new OrbitControls(camera, renderer.domElement);
  controls.minDistance = 50;
  controls.maxDistance = 500;

  //

  stats = new Stats();
  container.appendChild(stats.dom);

  //

  window.addEventListener("resize", onWindowResize);

  //

  initPostprocessing(window.innerWidth, window.innerHeight);
}

//

function onWindowResize() {
  const renderTargetWidth = window.innerWidth;
  const renderTargetHeight = window.innerHeight;

  camera.aspect = renderTargetWidth / renderTargetHeight;
  camera.updateProjectionMatrix();

  renderer.setSize(renderTargetWidth, renderTargetHeight);
  postprocessing.rtTextureColors.setSize(renderTargetWidth, renderTargetHeight);
  postprocessing.rtTextureDepth.setSize(renderTargetWidth, renderTargetHeight);
  postprocessing.rtTextureDepthMask.setSize(
    renderTargetWidth,
    renderTargetHeight
  );

  const adjustedWidth =
    renderTargetWidth * godrayRenderTargetResolutionMultiplier;
  const adjustedHeight =
    renderTargetHeight * godrayRenderTargetResolutionMultiplier;
  postprocessing.rtTextureGodRays1.setSize(adjustedWidth, adjustedHeight);
  postprocessing.rtTextureGodRays2.setSize(adjustedWidth, adjustedHeight);
}

function initPostprocessing(renderTargetWidth, renderTargetHeight) {
  postprocessing.scene = new Scene();

  postprocessing.camera = new OrthographicCamera(
    -0.5,
    0.5,
    0.5,
    -0.5,
    -10000,
    10000
  );
  postprocessing.camera.position.z = 100;

  postprocessing.scene.add(postprocessing.camera);

  const pars = {
    minFilter: LinearFilter,
    magFilter: LinearFilter,
    format: RGBFormat,
  };
  postprocessing.rtTextureColors = new WebGLRenderTarget(
    renderTargetWidth,
    renderTargetHeight,
    pars
  );

  // Switching the depth formats to luminance from rgb doesn't seem to work. I didn't
  // investigate further for now.
  // pars.format = LuminanceFormat;

  // I would have this quarter size and use it as one of the ping-pong render
  // targets but the aliasing causes some temporal flickering

  postprocessing.rtTextureDepth = new WebGLRenderTarget(
    renderTargetWidth,
    renderTargetHeight,
    pars
  );
  postprocessing.rtTextureDepthMask = new WebGLRenderTarget(
    renderTargetWidth,
    renderTargetHeight,
    pars
  );

  // The ping-pong render targets can use an adjusted resolution to minimize cost

  const adjustedWidth =
    renderTargetWidth * godrayRenderTargetResolutionMultiplier;
  const adjustedHeight =
    renderTargetHeight * godrayRenderTargetResolutionMultiplier;
  postprocessing.rtTextureGodRays1 = new WebGLRenderTarget(
    adjustedWidth,
    adjustedHeight,
    pars
  );
  postprocessing.rtTextureGodRays2 = new WebGLRenderTarget(
    adjustedWidth,
    adjustedHeight,
    pars
  );

  // god-ray shaders

  const godraysMaskShader = GodRaysDepthMaskShader;
  postprocessing.godrayMaskUniforms = UniformsUtils.clone(
    godraysMaskShader.uniforms
  );
  postprocessing.materialGodraysDepthMask = new ShaderMaterial({
    uniforms: postprocessing.godrayMaskUniforms,
    vertexShader: godraysMaskShader.vertexShader,
    fragmentShader: godraysMaskShader.fragmentShader,
  });

  const godraysGenShader = GodRaysGenerateShader;
  postprocessing.godrayGenUniforms = UniformsUtils.clone(
    godraysGenShader.uniforms
  );
  postprocessing.materialGodraysGenerate = new ShaderMaterial({
    uniforms: postprocessing.godrayGenUniforms,
    vertexShader: godraysGenShader.vertexShader,
    fragmentShader: godraysGenShader.fragmentShader,
  });

  const godraysCombineShader = GodRaysCombineShader;
  postprocessing.godrayCombineUniforms = UniformsUtils.clone(
    godraysCombineShader.uniforms
  );
  postprocessing.materialGodraysCombine = new ShaderMaterial({
    uniforms: postprocessing.godrayCombineUniforms,
    vertexShader: godraysCombineShader.vertexShader,
    fragmentShader: godraysCombineShader.fragmentShader,
  });

  const godraysFakeSunShader = GodRaysFakeSunShader;
  postprocessing.godraysFakeSunUniforms = UniformsUtils.clone(
    godraysFakeSunShader.uniforms
  );
  postprocessing.materialGodraysFakeSun = new ShaderMaterial({
    uniforms: postprocessing.godraysFakeSunUniforms,
    vertexShader: godraysFakeSunShader.vertexShader,
    fragmentShader: godraysFakeSunShader.fragmentShader,
  });

  postprocessing.godraysFakeSunUniforms.bgColor.value.setHex(bgColor);
  postprocessing.godraysFakeSunUniforms.sunColor.value.setHex(sunColor);

  postprocessing.godrayCombineUniforms.fGodRayIntensity.value = 0.75;

  postprocessing.quad = new Mesh(
    new PlaneGeometry(1.0, 1.0),
    postprocessing.materialGodraysGenerate
  );
  postprocessing.quad.position.z = -9900;
  postprocessing.scene.add(postprocessing.quad);
}

function animate() {
  requestAnimationFrame(animate, renderer.domElement);

  stats.begin();
  render();
  stats.end();
}

function getStepSize(filterLen, tapsPerPass, pass) {
  return filterLen * Math.pow(tapsPerPass, -pass);
}

function filterGodRays(inputTex, renderTarget, stepSize) {
  postprocessing.scene.overrideMaterial =
    postprocessing.materialGodraysGenerate;

  postprocessing.godrayGenUniforms["fStepSize"].value = stepSize;
  postprocessing.godrayGenUniforms["tInput"].value = inputTex;

  renderer.setRenderTarget(renderTarget);
  renderer.render(postprocessing.scene, postprocessing.camera);
  postprocessing.scene.overrideMaterial = null;
}

function render() {
  const time = Date.now() / 4000;

  sphereMesh.position.x = orbitRadius * Math.cos(time);
  sphereMesh.position.z = orbitRadius * Math.sin(time) - 100;

  if (postprocessing.enabled) {
    clipPosition.x = sunPosition.x;
    clipPosition.y = sunPosition.y;
    clipPosition.z = sunPosition.z;
    clipPosition.w = 1;

    clipPosition
      .applyMatrix4(camera.matrixWorldInverse)
      .applyMatrix4(camera.projectionMatrix);

    // perspective divide (produce NDC space)

    clipPosition.x /= clipPosition.w;
    clipPosition.y /= clipPosition.w;

    screenSpacePosition.x = (clipPosition.x + 1) / 2; // transform from [-1,1] to [0,1]
    screenSpacePosition.y = (clipPosition.y + 1) / 2; // transform from [-1,1] to [0,1]
    screenSpacePosition.z = clipPosition.z; // needs to stay in clip space for visibilty checks

    // Give it to the god-ray and sun shaders

    postprocessing.godrayGenUniforms["vSunPositionScreenSpace"].value.copy(
      screenSpacePosition
    );
    postprocessing.godraysFakeSunUniforms["vSunPositionScreenSpace"].value.copy(
      screenSpacePosition
    );

    // -- Draw sky and sun --

    // Clear colors and depths, will clear to sky color

    renderer.setRenderTarget(postprocessing.rtTextureColors);
    renderer.clear(true, true, false);

    // Sun render. Runs a shader that gives a brightness based on the screen
    // space distance to the sun. Not very efficient, so i make a scissor
    // rectangle around the suns position to avoid rendering surrounding pixels.

    const sunsqH = 0.74 * window.innerHeight; // 0.74 depends on extent of sun from shader
    const sunsqW = 0.74 * window.innerHeight; // both depend on height because sun is aspect-corrected

    screenSpacePosition.x *= window.innerWidth;
    screenSpacePosition.y *= window.innerHeight;

    renderer.setScissor(
      screenSpacePosition.x - sunsqW / 2,
      screenSpacePosition.y - sunsqH / 2,
      sunsqW,
      sunsqH
    );
    renderer.setScissorTest(true);

    postprocessing.godraysFakeSunUniforms["fAspect"].value =
      window.innerWidth / window.innerHeight;

    postprocessing.scene.overrideMaterial =
      postprocessing.materialGodraysFakeSun;
    renderer.setRenderTarget(postprocessing.rtTextureColors);
    renderer.render(postprocessing.scene, postprocessing.camera);

    renderer.setScissorTest(false);

    // -- Draw scene objects --

    // Colors

    scene.overrideMaterial = null;
    renderer.setRenderTarget(postprocessing.rtTextureColors);
    renderer.render(scene, camera);

    // Depth

    scene.overrideMaterial = materialDepth;
    renderer.setRenderTarget(postprocessing.rtTextureDepth);
    renderer.clear();
    renderer.render(scene, camera);

    //

    postprocessing.godrayMaskUniforms["tInput"].value =
      postprocessing.rtTextureDepth.texture;

    postprocessing.scene.overrideMaterial =
      postprocessing.materialGodraysDepthMask;
    renderer.setRenderTarget(postprocessing.rtTextureDepthMask);
    renderer.render(postprocessing.scene, postprocessing.camera);

    // -- Render god-rays --

    // Maximum length of god-rays (in texture space [0,1]X[0,1])

    const filterLen = 1.0;

    // Samples taken by filter

    const TAPS_PER_PASS = 6.0;

    // Pass order could equivalently be 3,2,1 (instead of 1,2,3), which
    // would start with a small filter support and grow to large. however
    // the large-to-small order produces less objectionable aliasing artifacts that
    // appear as a glimmer along the length of the beams

    // pass 1 - render into first ping-pong target
    filterGodRays(
      postprocessing.rtTextureDepthMask.texture,
      postprocessing.rtTextureGodRays2,
      getStepSize(filterLen, TAPS_PER_PASS, 1.0)
    );

    // pass 2 - render into second ping-pong target
    filterGodRays(
      postprocessing.rtTextureGodRays2.texture,
      postprocessing.rtTextureGodRays1,
      getStepSize(filterLen, TAPS_PER_PASS, 2.0)
    );

    // pass 3 - 1st RT
    filterGodRays(
      postprocessing.rtTextureGodRays1.texture,
      postprocessing.rtTextureGodRays2,
      getStepSize(filterLen, TAPS_PER_PASS, 3.0)
    );

    // final pass - composite god-rays onto colors

    postprocessing.godrayCombineUniforms["tColors"].value =
      postprocessing.rtTextureColors.texture;
    postprocessing.godrayCombineUniforms["tGodRays"].value =
      postprocessing.rtTextureGodRays2.texture;

    postprocessing.scene.overrideMaterial =
      postprocessing.materialGodraysCombine;

    renderer.setRenderTarget(null);
    renderer.render(postprocessing.scene, postprocessing.camera);
    postprocessing.scene.overrideMaterial = null;
  } else {
    renderer.setRenderTarget(null);
    renderer.clear();
    renderer.render(scene, camera);
  }
}
