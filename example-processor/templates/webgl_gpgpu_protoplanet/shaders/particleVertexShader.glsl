"\n\n\t\t\t// For PI declaration:\n\t\t\t#include <common>\n\n\t\t\tuniform sampler2D texturePosition;\n\t\t\tuniform sampler2D textureVelocity;\n\n\t\t\tuniform float cameraConstant;\n\t\t\tuniform float density;\n\n\t\t\tvarying vec4 vColor;\n\n\t\t\tfloat radiusFromMass( float mass ) {\n\t\t\t\t// Calculate radius of a sphere from mass and density\n\t\t\t\treturn pow( ( 3.0 / ( 4.0 * PI ) ) * mass / density, 1.0 / 3.0 );\n\t\t\t}\n\n\n\t\t\tvoid main() {\n\n\n\t\t\t\tvec4 posTemp = texture2D( texturePosition, uv );\n\t\t\t\tvec3 pos = posTemp.xyz;\n\n\t\t\t\tvec4 velTemp = texture2D( textureVelocity, uv );\n\t\t\t\tvec3 vel = velTemp.xyz;\n\t\t\t\tfloat mass = velTemp.w;\n\n\t\t\t\tvColor = vec4( 1.0, mass / 250.0, 0.0, 1.0 );\n\n\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );\n\n\t\t\t\t// Calculate radius of a sphere from mass and density\n\t\t\t\t//float radius = pow( ( 3.0 / ( 4.0 * PI ) ) * mass / density, 1.0 / 3.0 );\n\t\t\t\tfloat radius = radiusFromMass( mass );\n\n\t\t\t\t// Apparent size in pixels\n\t\t\t\tif ( mass == 0.0 ) {\n\t\t\t\t\tgl_PointSize = 0.0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgl_PointSize = radius * cameraConstant / ( - mvPosition.z );\n\t\t\t\t}\n\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t}\n\n\t\t"