import "./style.css"; // For webpack support

import {
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Scene,
  Color,
  Fog,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  TextureLoader,
  MeshLambertMaterial,
  DoubleSide,
  ParametricBufferGeometry,
  Mesh,
  SphereGeometry,
  MeshLambertMaterial,
  Mesh,
  RepeatWrapping,
  sRGBEncoding,
  MeshLambertMaterial,
  Mesh,
  PlaneGeometry,
  BoxGeometry,
  MeshLambertMaterial,
  Mesh,
  Mesh,
  Mesh,
  BoxGeometry,
  BoxGeometry,
  Mesh,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  DirectionalLight,
  Plane,
  Vector3,
  Plane,
  Vector3,
  MeshPhongMaterial,
  DoubleSide,
  TorusKnotGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  MeshPhongMaterial,
  WebGLRenderer,
  Plane,
  Plane,
  Vector3,
  Vector3,
  Vector3,
  Matrix4,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  DirectionalLight,
  MeshPhongMaterial,
  DoubleSide,
  Group,
  BoxGeometry,
  Mesh,
  PlaneGeometry,
  Color,
  Group,
  MeshBasicMaterial,
  DoubleSide,
  Mesh,
  Mesh,
  MeshPhongMaterial,
  WebGLRenderer,
  Matrix4,
  Matrix4,
  Plane,
  Vector3,
  Plane,
  Vector3,
  Plane,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  HemisphereLight,
  CameraHelper,
  Group,
  SphereGeometry,
  MeshLambertMaterial,
  Color,
  DoubleSide,
  Mesh,
  Group,
  PlaneHelper,
  PlaneHelper,
  PlaneHelper,
  Group,
  MeshBasicMaterial,
  AlwaysStencilFunc,
  BackSide,
  IncrementWrapStencilOp,
  IncrementWrapStencilOp,
  IncrementWrapStencilOp,
  Mesh,
  FrontSide,
  DecrementWrapStencilOp,
  DecrementWrapStencilOp,
  DecrementWrapStencilOp,
  Mesh,
  Clock,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  Plane,
  Vector3,
  Plane,
  Vector3,
  Plane,
  Vector3,
  PlaneHelper,
  TorusKnotGeometry,
  Group,
  PlaneGeometry,
  Group,
  MeshStandardMaterial,
  NotEqualStencilFunc,
  ReplaceStencilOp,
  ReplaceStencilOp,
  ReplaceStencilOp,
  Mesh,
  MeshStandardMaterial,
  DoubleSide,
  Mesh,
  Mesh,
  PlaneGeometry,
  ShadowMaterial,
  DoubleSide,
  WebGLRenderer,
  Vector3,
  Vector3,
  Vector2,
  TextureLoader,
  MeshPhongMaterial,
  Vector2,
  Vector3,
  Euler,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  BufferGeometry,
  Vector3,
  Vector3,
  Line,
  LineBasicMaterial,
  Raycaster,
  Mesh,
  BoxGeometry,
  MeshNormalMaterial,
  MeshPhongMaterial,
  Mesh,
  DepthFormat,
  UnsignedShortType,
  DepthFormat,
  DepthStencilFormat,
  UnsignedShortType,
  UnsignedIntType,
  UnsignedInt248Type,
  WebGLRenderer,
  PerspectiveCamera,
  WebGLRenderTarget,
  RGBFormat,
  NearestFilter,
  NearestFilter,
  DepthStencilFormat,
  DepthTexture,
  OrthographicCamera,
  ShaderMaterial,
  PlaneGeometry,
  Mesh,
  Scene,
  Scene,
  TorusKnotGeometry,
  MeshBasicMaterial,
  Mesh,
  Vector2,
  Color,
  PerspectiveCamera,
  OrthographicCamera,
  Scene,
  Scene,
  BufferGeometry,
  Float32BufferAttribute,
  BufferAttribute,
  DynamicDrawUsage,
  LineBasicMaterial,
  Line,
  DataTexture,
  RGBFormat,
  NearestFilter,
  NearestFilter,
  SpriteMaterial,
  Sprite,
  WebGLRenderer,
  Scene,
  Color,
  Scene,
  PerspectiveCamera,
  OrthographicCamera,
  Sprite,
  SpriteMaterial,
  CanvasTexture,
  Mesh,
  MeshLambertMaterial,
  DoubleSide,
  PointLight,
  WebGLRenderer,
  BufferGeometryLoader,
  Float32BufferAttribute,
  PerspectiveCamera,
  Scene,
  Color,
  AmbientLight,
  DirectionalLight,
  Group,
  Vector4,
  MathUtils,
  BufferGeometry,
  LineBasicMaterial,
  Line,
  BufferGeometry,
  LineBasicMaterial,
  Line,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  TextureLoader,
  RepeatWrapping,
  ParametricBufferGeometry,
  MeshLambertMaterial,
  DoubleSide,
  Mesh,
  WebGLRenderer,
  Vector3,
  Raycaster,
  Vector2,
  Vector2,
  Vector2,
  BoxGeometry,
  Scene,
  Color,
  PerspectiveCamera,
  AmbientLight,
  SpotLight,
  PlaneGeometry,
  ShadowMaterial,
  Mesh,
  GridHelper,
  WebGLRenderer,
  BufferGeometry,
  BufferAttribute,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  MeshLambertMaterial,
  Mesh,
  Vector3,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  FogExp2,
  PlaneGeometry,
  CanvasTexture,
  ClampToEdgeWrapping,
  ClampToEdgeWrapping,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  Vector3,
  Vector3,
  Cache,
  PerspectiveCamera,
  Vector3,
  Scene,
  Color,
  Fog,
  DirectionalLight,
  PointLight,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Group,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  WebGLRenderer,
  FontLoader,
  TextGeometry,
  Mesh,
  Mesh,
  PerspectiveCamera,
  Scene,
  Color,
  FontLoader,
  LineBasicMaterial,
  DoubleSide,
  MeshBasicMaterial,
  DoubleSide,
  ShapeGeometry,
  Mesh,
  Object3D,
  BufferGeometry,
  Line,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  FontLoader,
  Color,
  MeshBasicMaterial,
  DoubleSide,
  MeshBasicMaterial,
  DoubleSide,
  ShapeGeometry,
  Mesh,
  Group,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  PointLight,
  PointLightHelper,
  GridHelper,
  PolarGridHelper,
  Group,
  BoxHelper,
  WireframeGeometry,
  LineSegments,
  BoxHelper,
  EdgesGeometry,
  LineSegments,
  BoxHelper,
  BoxHelper,
  BoxHelper,
  Vector3,
  Euler,
  Quaternion,
  Vector3,
  BufferGeometryLoader,
  MeshNormalMaterial,
  Matrix4,
  InstancedMesh,
  Matrix4,
  Mesh,
  Matrix4,
  Mesh,
  PerspectiveCamera,
  WebGLRenderer,
  sRGBEncoding,
  Scene,
  Color,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  BufferGeometry,
  Color,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  BufferAttribute,
  BufferAttribute,
  BufferAttribute,
  MeshPhongMaterial,
  DoubleSide,
  Mesh,
  Raycaster,
  Vector2,
  BufferGeometry,
  BufferAttribute,
  LineBasicMaterial,
  Line,
  WebGLRenderer,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Vector2,
  Vector3,
  PerspectiveCamera,
  Scene,
  Color,
  Scene,
  WebGLRenderTarget,
  AmbientLight,
  SpotLight,
  MeshBasicMaterial,
  MeshPhongMaterial,
  Float32BufferAttribute,
  Matrix4,
  Quaternion,
  Color,
  BoxGeometry,
  Vector3,
  Euler,
  Vector3,
  Mesh,
  Mesh,
  Mesh,
  BoxGeometry,
  MeshLambertMaterial,
  WebGLRenderer,
  Vector2,
  OrthographicCamera,
  Scene,
  Color,
  DirectionalLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  BufferGeometry,
  Vector3,
  Vector3,
  Float32BufferAttribute,
  Object3D,
  LineBasicMaterial,
  Line,
  LineSegments,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Scene,
  PerspectiveCamera,
  BoxGeometry,
  Color,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  ShaderMaterial,
  Color,
  TextureLoader,
  Points,
  WebGLRenderer,
  Raycaster,
  Vector2,
  Vector2,
  Matrix4,
  BufferGeometry,
  BufferAttribute,
  BufferAttribute,
  PointsMaterial,
  Points,
  BufferAttribute,
  PointsMaterial,
  Points,
  BufferAttribute,
  PointsMaterial,
  Points,
  Scene,
  Clock,
  PerspectiveCamera,
  Color,
  Color,
  Color,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  Raycaster,
  PerspectiveCamera,
  Scene,
  Color,
  BoxGeometry,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  MeshLambertMaterial,
  TextureLoader,
  GridHelper,
  Raycaster,
  Vector2,
  PlaneGeometry,
  Mesh,
  MeshBasicMaterial,
  AmbientLight,
  DirectionalLight,
  WebGLRenderer,
  Mesh,
  PerspectiveCamera,
  Scene,
  Color,
  PointLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  HemisphereLight,
  HemisphereLightHelper,
  DirectionalLight,
  DirectionalLightHelper,
  PlaneGeometry,
  MeshLambertMaterial,
  Mesh,
  Color,
  Color,
  SphereGeometry,
  ShaderMaterial,
  BackSide,
  Mesh,
  AnimationMixer,
  WebGLRenderer,
  sRGBEncoding,
  Clock,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PerspectiveCamera,
  Color,
  Vector3,
  CatmullRomCurve3,
  Vector3,
  Color,
  Line,
  BufferGeometry,
  LineBasicMaterial,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  LineBasicMaterial,
  LineDashedMaterial,
  Line,
  PerspectiveCamera,
  Vector3,
  Scene,
  Color,
  Fog,
  DirectionalLight,
  PointLight,
  MeshPhongMaterial,
  Group,
  Font,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  WebGLRenderer,
  TextGeometry,
  Mesh,
  Mesh,
  Vector3,
  Scene,
  Color,
  PerspectiveCamera,
  DirectionalLight,
  DirectionalLight,
  Group,
  WebGLRenderer,
  BoxGeometry,
  IcosahedronGeometry,
  Vector3,
  Color,
  MeshPhongMaterial,
  Mesh,
  Vector3,
  Vector3,
  Mesh,
  MeshPhongMaterial,
  PerspectiveCamera,
  WebGLRenderer,
  ACESFilmicToneMapping,
  PMREMGenerator,
  Scene,
  Color,
  Box3,
  Vector3,
  Vector3,
  Clock,
  PerspectiveCamera,
  Scene,
  Fog,
  PointLight,
  DirectionalLight,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  MeshLambertMaterial,
  LOD,
  Mesh,
  WebGLRenderer,
  TextureLoader,
  PerspectiveCamera,
  Scene,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  MeshBasicMaterial,
  Mesh,
  PlaneGeometry,
  NoBlending,
  NormalBlending,
  AdditiveBlending,
  SubtractiveBlending,
  MultiplyBlending,
  PlaneGeometry,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  WebGLRenderer,
  CanvasTexture,
  MeshBasicMaterial,
  PerspectiveCamera,
  Scene,
  TextureLoader,
  CanvasTexture,
  RepeatWrapping,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  MeshBasicMaterial,
  Mesh,
  PlaneGeometry,
  ZeroFactor,
  OneFactor,
  SrcColorFactor,
  OneMinusSrcColorFactor,
  SrcAlphaFactor,
  OneMinusSrcAlphaFactor,
  DstAlphaFactor,
  OneMinusDstAlphaFactor,
  DstColorFactor,
  OneMinusDstColorFactor,
  SrcAlphaSaturateFactor,
  ZeroFactor,
  OneFactor,
  SrcColorFactor,
  OneMinusSrcColorFactor,
  SrcAlphaFactor,
  OneMinusSrcAlphaFactor,
  DstAlphaFactor,
  OneMinusDstAlphaFactor,
  DstColorFactor,
  OneMinusDstColorFactor,
  PlaneGeometry,
  PlaneGeometry,
  MeshBasicMaterial,
  CustomBlending,
  AddEquation,
  Mesh,
  Mesh,
  Mesh,
  WebGLRenderer,
  AddEquation,
  SubtractEquation,
  ReverseSubtractEquation,
  MinEquation,
  MaxEquation,
  CanvasTexture,
  MeshBasicMaterial,
  FrontSide,
  BackSide,
  DoubleSide,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  OrthographicCamera,
  AmbientLight,
  PointLight,
  PointLight,
  PointLight,
  TextureLoader,
  MeshStandardMaterial,
  Vector2,
  DoubleSide,
  MeshDepthMaterial,
  BasicDepthPacking,
  DoubleSide,
  MeshDepthMaterial,
  RGBADepthPacking,
  DoubleSide,
  MeshNormalMaterial,
  Vector2,
  DoubleSide,
  Mesh,
  FrontSide,
  BackSide,
  DoubleSide,
  CubeTextureLoader,
  LinearMipMapLinearFilter,
  LinearFilter,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  WebGLRenderer,
  ACESFilmicToneMapping,
  TorusKnotGeometry,
  SphereGeometry,
  MeshStandardMaterial,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  DefaultLoadingManager,
  UnsignedByteType,
  LinearFilter,
  CubeTextureLoader,
  sRGBEncoding,
  RGBM16Encoding,
  PMREMGenerator,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  DirectionalLight,
  Color,
  Color,
  SphereGeometry,
  ShaderMaterial,
  BackSide,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  ObjectLoader,
  PerspectiveCamera,
  Scene,
  Group,
  SphereGeometry,
  TextureLoader,
  sRGBEncoding,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  MeshPhysicalMaterial,
  Vector2,
  Mesh,
  MeshPhysicalMaterial,
  Mesh,
  MeshPhysicalMaterial,
  Vector2,
  Mesh,
  MeshPhysicalMaterial,
  Vector2,
  Vector2,
  Mesh,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  WebGLRenderer,
  ACESFilmicToneMapping,
  sRGBEncoding,
  EquirectangularReflectionMapping,
  WebGLRenderer,
  ACESFilmicToneMapping,
  sRGBEncoding,
  Scene,
  PerspectiveCamera,
  SphereGeometry,
  CanvasTexture,
  NearestFilter,
  RepeatWrapping,
  RepeatWrapping,
  MeshPhysicalMaterial,
  DoubleSide,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  ReinhardToneMapping,
  Scene,
  PerspectiveCamera,
  HemisphereLight,
  MeshStandardMaterial,
  TextureLoader,
  sRGBEncoding,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  EquirectangularReflectionMapping,
  Vector2,
  PerspectiveCamera,
  Scene,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  WebGLRenderer,
  CanvasTexture,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Scene,
  Color,
  Fog,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  NearestFilter,
  NearestFilter,
  MeshBasicMaterial,
  MeshBasicMaterial,
  PlaneGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  Mesh,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
  TextureLoader,
  Texture,
  MeshBasicMaterial,
  MeshBasicMaterial,
  NearestFilter,
  LinearFilter,
  UVMapping,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Scene,
  Color,
  Fog,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  NearestFilter,
  NearestMipmapNearestFilter,
  MeshBasicMaterial,
  MeshBasicMaterial,
  PlaneGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  Mesh,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
  TextureLoader,
  Texture,
  MeshBasicMaterial,
  MeshBasicMaterial,
  NearestFilter,
  LinearFilter,
  UVMapping,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  DirectionalLight,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  WebGLRenderer,
  sRGBEncoding,
  TextureLoader,
  RepeatWrapping,
  UniformsUtils,
  Vector3,
  Vector3,
  ShaderMaterial,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  BufferGeometryLoader,
  MeshBasicMaterial,
  Mesh,
  ShaderMaterial,
  DoubleSide,
  Mesh,
  Vector3,
  Vector3,
  Vector3,
  BufferAttribute,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  Clock,
  Raycaster,
  HemisphereLight,
  Vector3,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  Vector3,
  Spherical,
  Matrix4,
  Quaternion,
  Clock,
  PerspectiveCamera,
  Scene,
  ConeGeometry,
  MeshNormalMaterial,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  CircleGeometry,
  PlaneGeometry,
  Object3D,
  CylinderGeometry,
  MeshPhongMaterial,
  Mesh,
  SphereGeometry,
  Mesh,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  Plane,
  Vector3,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  PerspectiveCamera,
  CameraHelper,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  DirectionalLight,
  AnimationMixer,
  WebGLRenderer,
  sRGBEncoding,
  MathUtils,
  MathUtils,
  BoxGeometry,
  SphereGeometry,
  DodecahedronGeometry,
  CylinderGeometry,
  Scene,
  PerspectiveCamera,
  MeshStandardMaterial,
  Color,
  Mesh,
  HemisphereLight,
  DirectionalLight,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  Color,
  BufferGeometry,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  CanvasTexture,
  PointsMaterial,
  Points,
  PerspectiveCamera,
  Vector3,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  Texture,
  ImageLoader,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  TextureLoader,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  PerspectiveCamera,
  Scene,
  FogExp2,
  BufferGeometry,
  TextureLoader,
  Float32BufferAttribute,
  PointsMaterial,
  Points,
  WebGLRenderer,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  FogExp2,
  WebGLRenderer,
  Object3D,
  Points,
  PlaneGeometry,
  PointsMaterial,
  BufferAttribute,
  BufferGeometry,
  DynamicDrawUsage,
  Points,
  PointsMaterial,
  PerspectiveCamera,
  Scene,
  FogExp2,
  BufferGeometry,
  TextureLoader,
  Float32BufferAttribute,
  PointsMaterial,
  AdditiveBlending,
  Points,
  WebGLRenderer,
  Points,
  PerspectiveCamera,
  Scene,
  BufferGeometry,
  BufferAttribute,
  BufferAttribute,
  ShaderMaterial,
  Color,
  Points,
  WebGLRenderer,
  OrthographicCamera,
  Scene,
  Scene,
  DirectionalLight,
  DirectionalLight,
  WebGLRenderTarget,
  LinearFilter,
  NearestFilter,
  RGBAFormat,
  FloatType,
  ShaderMaterial,
  ShaderMaterial,
  PlaneGeometry,
  Mesh,
  TorusGeometry,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  Mesh,
  WebGLRenderer,
  Clock,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  TextureLoader,
  RepeatWrapping,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  PlaneGeometry,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  PerspectiveCamera,
  OrthographicCamera,
  Scene,
  Scene,
  Scene,
  DirectionalLight,
  DirectionalLight,
  WebGLRenderTarget,
  LinearFilter,
  NearestFilter,
  RGBFormat,
  ShaderMaterial,
  ShaderMaterial,
  PlaneGeometry,
  Mesh,
  TorusGeometry,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  ACESFilmicToneMapping,
  Scene,
  PerspectiveCamera,
  Vector3,
  PlaneGeometry,
  TextureLoader,
  RepeatWrapping,
  Vector3,
  PMREMGenerator,
  MathUtils,
  MathUtils,
  BoxGeometry,
  MeshStandardMaterial,
  Mesh,
  Vector3,
  MathUtils,
  MathUtils,
  PerspectiveCamera,
  Scene,
  GridHelper,
  WebGLRenderer,
  sRGBEncoding,
  ACESFilmicToneMapping,
  PerspectiveCamera,
  PerspectiveCamera,
  OrthographicCamera,
  Scene,
  Scene,
  Scene,
  AmbientLight,
  DirectionalLight,
  BackSide,
  AdditiveBlending,
  UniformsUtils,
  UniformsLib,
  UniformsLib,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderMaterial,
  MeshPhongMaterial,
  TextureLoader,
  sRGBEncoding,
  sRGBEncoding,
  sRGBEncoding,
  MeshBasicMaterial,
  AdditiveBlending,
  sRGBEncoding,
  MeshLambertMaterial,
  NormalBlending,
  SphereGeometry,
  Mesh,
  Mesh,
  Mesh,
  Mesh,
  ShaderMaterial,
  NoBlending,
  ShaderMaterial,
  NoBlending,
  Mesh,
  PlaneGeometry,
  Mesh,
  PlaneGeometry,
  CubeTextureLoader,
  sRGBEncoding,
  WebGLRenderer,
  LinearFilter,
  LinearFilter,
  RGBAFormat,
  WebGLRenderTarget,
  FloatType,
  WebGLRenderTarget,
  Clock,
  PerspectiveCamera,
  Scene,
  Fog,
  WebGLCubeRenderTarget,
  RGBFormat,
  LinearMipmapLinearFilter,
  sRGBEncoding,
  CubeCamera,
  TextureLoader,
  RepeatWrapping,
  NearestFilter,
  sRGBEncoding,
  RepeatWrapping,
  sRGBEncoding,
  RepeatWrapping,
  sRGBEncoding,
  MeshPhongMaterial,
  PlaneGeometry,
  Mesh,
  MeshPhongMaterial,
  MeshPhongMaterial,
  MeshPhongMaterial,
  SphereGeometry,
  TorusGeometry,
  BoxGeometry,
  MeshPhongMaterial,
  Mesh,
  BoxGeometry,
  BoxGeometry,
  BoxGeometry,
  BoxGeometry,
  BoxGeometry,
  SphereGeometry,
  AnimationMixer,
  AmbientLight,
  PointLight,
  DirectionalLight,
  CameraHelper,
  WebGLRenderer,
  PCFSoftShadowMap,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  Color,
  BoxGeometry,
  IcosahedronGeometry,
  TorusKnotGeometry,
  MeshNormalMaterial,
  Mesh,
  Group,
  WebGLRenderTarget,
  WebGLRenderTarget,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  OrthographicCamera,
  CameraHelper,
  MeshDepthMaterial,
  ShaderMaterial,
  ShaderMaterial,
  Color,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  CameraHelper,
  DirectionalLight,
  CameraHelper,
  TorusKnotGeometry,
  MeshPhongMaterial,
  Mesh,
  BoxGeometry,
  Mesh,
  BoxGeometry,
  MeshPhongMaterial,
  Mesh,
  WebGLRenderer,
  BasicShadowMap,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Clock,
  PlaneGeometry,
  MeshPhongMaterial,
  Mesh,
  GridHelper,
  HemisphereLight,
  DirectionalLight,
  AnimationMixer,
  WebGLRenderer,
  NoToneMapping,
  LinearToneMapping,
  ReinhardToneMapping,
  CineonToneMapping,
  ACESFilmicToneMapping,
  CustomToneMapping,
  WebGLRenderer,
  sRGBEncoding,
  ShaderChunk,
  ShaderChunk,
  Scene,
  PerspectiveCamera,
  EquirectangularReflectionMapping,
  Clock,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  TextureLoader,
  RepeatWrapping,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Fog,
  BoxGeometry,
  MeshNormalMaterial,
  Mesh,
  PerspectiveCamera,
  Scene,
  WebGLRenderer,
  CubeTextureLoader,
  MeshBasicMaterial,
  SphereGeometry,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Vector2,
  Raycaster,
  Vector3,
  PerspectiveCamera,
  Scene,
  WebGLRenderer,
  ShaderMaterial,
  CubeTextureLoader,
  PlaneGeometry,
  MeshPhongMaterial,
  DoubleSide,
  Mesh,
  BufferGeometryLoader,
  MeshPhongMaterial,
  Mesh,
  SphereGeometry,
  MeshPhongMaterial,
  Mesh,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  Scene,
  OrthographicCamera,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  WebGLRenderTarget,
  WebGLRenderTarget,
  UniformsUtils,
  ShaderMaterial,
  Mesh,
  PlaneGeometry,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Clock,
  HemisphereLight,
  DirectionalLight,
  Group,
  TetrahedronGeometry,
  MeshStandardMaterial,
  Mesh,
  WebGLRenderer,
  Vector3,
  Vector4,
  Vector3,
  PerspectiveCamera,
  Scene,
  MeshDepthMaterial,
  MeshBasicMaterial,
  SphereGeometry,
  Mesh,
  WebGLRenderer,
  Scene,
  OrthographicCamera,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  WebGLRenderTarget,
  WebGLRenderTarget,
  WebGLRenderTarget,
  WebGLRenderTarget,
  WebGLRenderTarget,
  UniformsUtils,
  ShaderMaterial,
  UniformsUtils,
  ShaderMaterial,
  UniformsUtils,
  ShaderMaterial,
  UniformsUtils,
  ShaderMaterial,
  Mesh,
  PlaneGeometry,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Group,
  DirectionalLight,
  Mesh,
  PlaneBufferGeometry,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Group,
  LoadingManager,
  WebGLRenderer,
  PerspectiveCamera,
  OrthographicCamera,
  MathUtils,
  Scene,
  Group,
  PointLight,
  PointLight,
  PointLight,
  AmbientLight,
  SphereGeometry,
  MeshStandardMaterial,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Object3D,
  PointLight,
  PointLight,
  PointLight,
  AmbientLight,
  SphereGeometry,
  MeshStandardMaterial,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  BoxGeometry,
  MeshBasicMaterial,
  Mesh,
  TextureLoader,
  MeshBasicMaterial,
  Mesh,
  Scene,
  PerspectiveCamera,
  TorusKnotGeometry,
  MeshPhongMaterial,
  Mesh,
  AmbientLight,
  PointLight,
  WebGLRenderer,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  HemisphereLight,
  Group,
  BoxGeometry,
  MeshLambertMaterial,
  Mesh,
  Clock,
  WebGLRenderer,
  ReinhardToneMapping,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  PointLight,
  Vector2,
  AnimationMixer,
  Layers,
  MeshBasicMaterial,
  WebGLRenderer,
  ReinhardToneMapping,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  Vector2,
  ShaderMaterial,
  Raycaster,
  Vector2,
  IcosahedronGeometry,
  Color,
  MeshBasicMaterial,
  Mesh,
  PerspectiveCamera,
  Scene,
  EquirectangularReflectionMapping,
  WebGLRenderer,
  ACESFilmicToneMapping,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBAFormat,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  Mesh,
  Mesh,
  WebGLRenderer,
  MeshNormalMaterial,
  Scene,
  Color,
  PerspectiveCamera,
  OrthographicCamera,
  WebGLRenderer,
  PCFSoftShadowMap,
  Vector3,
  AmbientLight,
  Vector3,
  MeshPhongMaterial,
  Mesh,
  PlaneGeometry,
  MeshPhongMaterial,
  MeshPhongMaterial,
  BoxGeometry,
  Mesh,
  Mesh,
  Scene,
  Fog,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  CameraHelper,
  Group,
  SphereGeometry,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  PlaneGeometry,
  Mesh,
  BoxGeometry,
  ShaderChunk,
  ShaderChunk,
  WebGLRenderer,
  sRGBEncoding,
  Mesh,
  PerspectiveCamera,
  WebGLRenderTarget,
  Matrix3,
  Vector3,
  Vector3,
  BufferAttribute,
  DynamicDrawUsage,
  PerspectiveCamera,
  Scene,
  TorusKnotGeometry,
  MeshBasicMaterial,
  MeshBasicMaterial,
  BackSide,
  BoxGeometry,
  Mesh,
  WebGLRenderer,
  ShaderChunk,
  ShaderChunk,
  DataTexture,
  RGBAFormat,
  FloatType,
  DataTexture,
  Vector3,
  Vector3,
  PerspectiveCamera,
  Scene,
  Color,
  WebGLRenderer,
  NoToneMapping,
  WebGLRenderTarget,
  AmbientLight,
  PointLight,
  Vector2,
  SphereGeometry,
  Group,
  ShaderLib,
  ShaderMaterial,
  UniformsUtils,
  Mesh,
  FrontSide,
  DoubleSide,
  Color,
  Group,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  WebGLMultipleRenderTargets,
  NearestFilter,
  NearestFilter,
  FloatType,
  Scene,
  PerspectiveCamera,
  TextureLoader,
  RepeatWrapping,
  Mesh,
  TorusKnotGeometry,
  RawShaderMaterial,
  Vector2,
  GLSL3,
  Scene,
  OrthographicCamera,
  Mesh,
  PlaneGeometry,
  RawShaderMaterial,
  GLSL3,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Clock,
  HemisphereLight,
  Group,
  SphereGeometry,
  MeshLambertMaterial,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  WebGLRenderer,
  RGBFormat,
  Vector2,
  WebGLMultisampleRenderTarget,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  WebGLRenderer,
  TextureLoader,
  AmbientLight,
  DirectionalLight,
  Vector3,
  Quaternion,
  MeshPhongMaterial,
  RepeatWrapping,
  RepeatWrapping,
  Vector3,
  PlaneGeometry,
  MeshLambertMaterial,
  DoubleSide,
  Mesh,
  RepeatWrapping,
  RepeatWrapping,
  MeshPhongMaterial,
  Mesh,
  BoxGeometry,
  MeshPhongMaterial,
} from "three";

import Stats from "three/examples/jsm/libs/stats.module.js";

import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";

// Graphics variables
let container, stats;
let camera, controls, scene, renderer;
let textureLoader;
const clock = new Clock();

// Physics variables
const gravityConstant = -9.8;
let physicsWorld;
const rigidBodies = [];
const margin = 0.05;
let hinge;
let cloth;
let transformAux1;

let armMovement = 0;

Ammo().then(function (AmmoLib) {
  Ammo = AmmoLib;

  init();
  animate();
});

function init() {
  initGraphics();

  initPhysics();

  createObjects();

  initInput();
}

function initGraphics() {
  container = document.getElementById("container");

  camera = new PerspectiveCamera(
    60,
    window.innerWidth / window.innerHeight,
    0.2,
    2000
  );

  scene = new Scene();
  scene.background = new Color(0xbfd1e5);

  camera.position.set(-12, 7, 4);

  renderer = new WebGLRenderer();
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.shadowMap.enabled = true;
  container.appendChild(renderer.domElement);

  controls = new OrbitControls(camera, renderer.domElement);
  controls.target.set(0, 2, 0);
  controls.update();

  textureLoader = new TextureLoader();

  const ambientLight = new AmbientLight(0x404040);
  scene.add(ambientLight);

  const light = new DirectionalLight(0xffffff, 1);
  light.position.set(-7, 10, 15);
  light.castShadow = true;
  const d = 10;
  light.shadow.camera.left = -d;
  light.shadow.camera.right = d;
  light.shadow.camera.top = d;
  light.shadow.camera.bottom = -d;

  light.shadow.camera.near = 2;
  light.shadow.camera.far = 50;

  light.shadow.mapSize.x = 1024;
  light.shadow.mapSize.y = 1024;

  light.shadow.bias = -0.003;
  scene.add(light);

  stats = new Stats();
  stats.domElement.style.position = "absolute";
  stats.domElement.style.top = "0px";
  container.appendChild(stats.domElement);

  window.addEventListener("resize", onWindowResize);
}

function initPhysics() {
  // Physics configuration

  const collisionConfiguration =
    new Ammo.btSoftBodyRigidBodyCollisionConfiguration();
  const dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);
  const broadphase = new Ammo.btDbvtBroadphase();
  const solver = new Ammo.btSequentialImpulseConstraintSolver();
  const softBodySolver = new Ammo.btDefaultSoftBodySolver();
  physicsWorld = new Ammo.btSoftRigidDynamicsWorld(
    dispatcher,
    broadphase,
    solver,
    collisionConfiguration,
    softBodySolver
  );
  physicsWorld.setGravity(new Ammo.btVector3(0, gravityConstant, 0));
  physicsWorld
    .getWorldInfo()
    .set_m_gravity(new Ammo.btVector3(0, gravityConstant, 0));

  transformAux1 = new Ammo.btTransform();
}

function createObjects() {
  const pos = new Vector3();
  const quat = new Quaternion();

  // Ground
  pos.set(0, -0.5, 0);
  quat.set(0, 0, 0, 1);
  const ground = createParalellepiped(
    40,
    1,
    40,
    0,
    pos,
    quat,
    new MeshPhongMaterial({ color: 0xffffff })
  );
  ground.castShadow = true;
  ground.receiveShadow = true;
  textureLoader.load("textures/grid.png", function (texture) {
    texture.wrapS = RepeatWrapping;
    texture.wrapT = RepeatWrapping;
    texture.repeat.set(40, 40);
    ground.material.map = texture;
    ground.material.needsUpdate = true;
  });

  // Wall
  const brickMass = 0.5;
  const brickLength = 1.2;
  const brickDepth = 0.6;
  const brickHeight = brickLength * 0.5;
  const numBricksLength = 6;
  const numBricksHeight = 8;
  const z0 = -numBricksLength * brickLength * 0.5;
  pos.set(0, brickHeight * 0.5, z0);
  quat.set(0, 0, 0, 1);
  for (let j = 0; j < numBricksHeight; j++) {
    const oddRow = j % 2 == 1;

    pos.z = z0;

    if (oddRow) {
      pos.z -= 0.25 * brickLength;
    }

    const nRow = oddRow ? numBricksLength + 1 : numBricksLength;

    for (let i = 0; i < nRow; i++) {
      let brickLengthCurrent = brickLength;
      let brickMassCurrent = brickMass;

      if (oddRow && (i == 0 || i == nRow - 1)) {
        brickLengthCurrent *= 0.5;
        brickMassCurrent *= 0.5;
      }

      const brick = createParalellepiped(
        brickDepth,
        brickHeight,
        brickLengthCurrent,
        brickMassCurrent,
        pos,
        quat,
        createMaterial()
      );
      brick.castShadow = true;
      brick.receiveShadow = true;

      if (oddRow && (i == 0 || i == nRow - 2)) {
        pos.z += 0.75 * brickLength;
      } else {
        pos.z += brickLength;
      }
    }
    pos.y += brickHeight;
  }

  // The cloth
  // Cloth graphic object
  const clothWidth = 4;
  const clothHeight = 3;
  const clothNumSegmentsZ = clothWidth * 5;
  const clothNumSegmentsY = clothHeight * 5;
  const clothPos = new Vector3(-3, 3, 2);

  const clothGeometry = new PlaneGeometry(
    clothWidth,
    clothHeight,
    clothNumSegmentsZ,
    clothNumSegmentsY
  );
  clothGeometry.rotateY(Math.PI * 0.5);
  clothGeometry.translate(
    clothPos.x,
    clothPos.y + clothHeight * 0.5,
    clothPos.z - clothWidth * 0.5
  );

  const clothMaterial = new MeshLambertMaterial({
    color: 0xffffff,
    side: DoubleSide,
  });
  cloth = new Mesh(clothGeometry, clothMaterial);
  cloth.castShadow = true;
  cloth.receiveShadow = true;
  scene.add(cloth);
  textureLoader.load("textures/grid.png", function (texture) {
    texture.wrapS = RepeatWrapping;
    texture.wrapT = RepeatWrapping;
    texture.repeat.set(clothNumSegmentsZ, clothNumSegmentsY);
    cloth.material.map = texture;
    cloth.material.needsUpdate = true;
  });

  // Cloth physic object
  const softBodyHelpers = new Ammo.btSoftBodyHelpers();
  const clothCorner00 = new Ammo.btVector3(
    clothPos.x,
    clothPos.y + clothHeight,
    clothPos.z
  );
  const clothCorner01 = new Ammo.btVector3(
    clothPos.x,
    clothPos.y + clothHeight,
    clothPos.z - clothWidth
  );
  const clothCorner10 = new Ammo.btVector3(clothPos.x, clothPos.y, clothPos.z);
  const clothCorner11 = new Ammo.btVector3(
    clothPos.x,
    clothPos.y,
    clothPos.z - clothWidth
  );
  const clothSoftBody = softBodyHelpers.CreatePatch(
    physicsWorld.getWorldInfo(),
    clothCorner00,
    clothCorner01,
    clothCorner10,
    clothCorner11,
    clothNumSegmentsZ + 1,
    clothNumSegmentsY + 1,
    0,
    true
  );
  const sbConfig = clothSoftBody.get_m_cfg();
  sbConfig.set_viterations(10);
  sbConfig.set_piterations(10);

  clothSoftBody.setTotalMass(0.9, false);
  Ammo.castObject(clothSoftBody, Ammo.btCollisionObject)
    .getCollisionShape()
    .setMargin(margin * 3);
  physicsWorld.addSoftBody(clothSoftBody, 1, -1);
  cloth.userData.physicsBody = clothSoftBody;
  // Disable deactivation
  clothSoftBody.setActivationState(4);

  // The base
  const armMass = 2;
  const armLength = 3 + clothWidth;
  const pylonHeight = clothPos.y + clothHeight;
  const baseMaterial = new MeshPhongMaterial({ color: 0x606060 });
  pos.set(clothPos.x, 0.1, clothPos.z - armLength);
  quat.set(0, 0, 0, 1);
  const base = createParalellepiped(1, 0.2, 1, 0, pos, quat, baseMaterial);
  base.castShadow = true;
  base.receiveShadow = true;
  pos.set(clothPos.x, 0.5 * pylonHeight, clothPos.z - armLength);
  const pylon = createParalellepiped(
    0.4,
    pylonHeight,
    0.4,
    0,
    pos,
    quat,
    baseMaterial
  );
  pylon.castShadow = true;
  pylon.receiveShadow = true;
  pos.set(clothPos.x, pylonHeight + 0.2, clothPos.z - 0.5 * armLength);
  const arm = createParalellepiped(
    0.4,
    0.4,
    armLength + 0.4,
    armMass,
    pos,
    quat,
    baseMaterial
  );
  arm.castShadow = true;
  arm.receiveShadow = true;

  // Glue the cloth to the arm
  const influence = 0.5;
  clothSoftBody.appendAnchor(0, arm.userData.physicsBody, false, influence);
  clothSoftBody.appendAnchor(
    clothNumSegmentsZ,
    arm.userData.physicsBody,
    false,
    influence
  );

  // Hinge constraint to move the arm
  const pivotA = new Ammo.btVector3(0, pylonHeight * 0.5, 0);
  const pivotB = new Ammo.btVector3(0, -0.2, -armLength * 0.5);
  const axis = new Ammo.btVector3(0, 1, 0);
  hinge = new Ammo.btHingeConstraint(
    pylon.userData.physicsBody,
    arm.userData.physicsBody,
    pivotA,
    pivotB,
    axis,
    axis,
    true
  );
  physicsWorld.addConstraint(hinge, true);
}

function createParalellepiped(sx, sy, sz, mass, pos, quat, material) {
  const threeObject = new Mesh(new BoxGeometry(sx, sy, sz, 1, 1, 1), material);
  const shape = new Ammo.btBoxShape(
    new Ammo.btVector3(sx * 0.5, sy * 0.5, sz * 0.5)
  );
  shape.setMargin(margin);

  createRigidBody(threeObject, shape, mass, pos, quat);

  return threeObject;
}

function createRigidBody(threeObject, physicsShape, mass, pos, quat) {
  threeObject.position.copy(pos);
  threeObject.quaternion.copy(quat);

  const transform = new Ammo.btTransform();
  transform.setIdentity();
  transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
  transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
  const motionState = new Ammo.btDefaultMotionState(transform);

  const localInertia = new Ammo.btVector3(0, 0, 0);
  physicsShape.calculateLocalInertia(mass, localInertia);

  const rbInfo = new Ammo.btRigidBodyConstructionInfo(
    mass,
    motionState,
    physicsShape,
    localInertia
  );
  const body = new Ammo.btRigidBody(rbInfo);

  threeObject.userData.physicsBody = body;

  scene.add(threeObject);

  if (mass > 0) {
    rigidBodies.push(threeObject);

    // Disable deactivation
    body.setActivationState(4);
  }

  physicsWorld.addRigidBody(body);
}

function createRandomColor() {
  return Math.floor(Math.random() * (1 << 24));
}

function createMaterial() {
  return new MeshPhongMaterial({ color: createRandomColor() });
}

function initInput() {
  window.addEventListener("keydown", function (event) {
    switch (event.keyCode) {
      // Q
      case 81:
        armMovement = 1;
        break;

      // A
      case 65:
        armMovement = -1;
        break;
    }
  });

  window.addEventListener("keyup", function () {
    armMovement = 0;
  });
}

function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize(window.innerWidth, window.innerHeight);
}

function animate() {
  requestAnimationFrame(animate);

  render();
  stats.update();
}

function render() {
  const deltaTime = clock.getDelta();

  updatePhysics(deltaTime);

  renderer.render(scene, camera);
}

function updatePhysics(deltaTime) {
  // Hinge control
  hinge.enableAngularMotor(true, 0.8 * armMovement, 50);

  // Step world
  physicsWorld.stepSimulation(deltaTime, 10);

  // Update cloth
  const softBody = cloth.userData.physicsBody;
  const clothPositions = cloth.geometry.attributes.position.array;
  const numVerts = clothPositions.length / 3;
  const nodes = softBody.get_m_nodes();
  let indexFloat = 0;

  for (let i = 0; i < numVerts; i++) {
    const node = nodes.at(i);
    const nodePos = node.get_m_x();
    clothPositions[indexFloat++] = nodePos.x();
    clothPositions[indexFloat++] = nodePos.y();
    clothPositions[indexFloat++] = nodePos.z();
  }

  cloth.geometry.computeVertexNormals();
  cloth.geometry.attributes.position.needsUpdate = true;
  cloth.geometry.attributes.normal.needsUpdate = true;

  // Update rigid bodies
  for (let i = 0, il = rigidBodies.length; i < il; i++) {
    const objThree = rigidBodies[i];
    const objPhys = objThree.userData.physicsBody;
    const ms = objPhys.getMotionState();
    if (ms) {
      ms.getWorldTransform(transformAux1);
      const p = transformAux1.getOrigin();
      const q = transformAux1.getRotation();
      objThree.position.set(p.x(), p.y(), p.z());
      objThree.quaternion.set(q.x(), q.y(), q.z(), q.w());
    }
  }
}
