import "./style.css"; // For webpack support

import {
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Scene,
  Color,
  Fog,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  TextureLoader,
  MeshLambertMaterial,
  DoubleSide,
  ParametricBufferGeometry,
  Mesh,
  SphereGeometry,
  MeshLambertMaterial,
  Mesh,
  RepeatWrapping,
  sRGBEncoding,
  MeshLambertMaterial,
  Mesh,
  PlaneGeometry,
  BoxGeometry,
  MeshLambertMaterial,
  Mesh,
  Mesh,
  Mesh,
  BoxGeometry,
  BoxGeometry,
  Mesh,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  DirectionalLight,
  Plane,
  Vector3,
  Plane,
  Vector3,
  MeshPhongMaterial,
  DoubleSide,
  TorusKnotGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  MeshPhongMaterial,
  WebGLRenderer,
  Plane,
  Plane,
  Vector3,
  Vector3,
  Vector3,
  Matrix4,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  DirectionalLight,
  MeshPhongMaterial,
  DoubleSide,
  Group,
  BoxGeometry,
  Mesh,
  PlaneGeometry,
  Color,
  Group,
  MeshBasicMaterial,
  DoubleSide,
  Mesh,
  Mesh,
  MeshPhongMaterial,
  WebGLRenderer,
  Matrix4,
  Matrix4,
  Plane,
  Vector3,
  Plane,
  Vector3,
  Plane,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  HemisphereLight,
  CameraHelper,
  Group,
  SphereGeometry,
  MeshLambertMaterial,
  Color,
  DoubleSide,
  Mesh,
  Group,
  PlaneHelper,
  PlaneHelper,
  PlaneHelper,
  Group,
  MeshBasicMaterial,
  AlwaysStencilFunc,
  BackSide,
  IncrementWrapStencilOp,
  IncrementWrapStencilOp,
  IncrementWrapStencilOp,
  Mesh,
  FrontSide,
  DecrementWrapStencilOp,
  DecrementWrapStencilOp,
  DecrementWrapStencilOp,
  Mesh,
  Clock,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  Plane,
  Vector3,
  Plane,
  Vector3,
  Plane,
  Vector3,
  PlaneHelper,
  TorusKnotGeometry,
  Group,
  PlaneGeometry,
  Group,
  MeshStandardMaterial,
  NotEqualStencilFunc,
  ReplaceStencilOp,
  ReplaceStencilOp,
  ReplaceStencilOp,
  Mesh,
  MeshStandardMaterial,
  DoubleSide,
  Mesh,
  Mesh,
  PlaneGeometry,
  ShadowMaterial,
  DoubleSide,
  WebGLRenderer,
  Vector3,
  Vector3,
  Vector2,
  TextureLoader,
  MeshPhongMaterial,
  Vector2,
  Vector3,
  Euler,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  BufferGeometry,
  Vector3,
  Vector3,
  Line,
  LineBasicMaterial,
  Raycaster,
  Mesh,
  BoxGeometry,
  MeshNormalMaterial,
  MeshPhongMaterial,
  Mesh,
  DepthFormat,
  UnsignedShortType,
  DepthFormat,
  DepthStencilFormat,
  UnsignedShortType,
  UnsignedIntType,
  UnsignedInt248Type,
  WebGLRenderer,
  PerspectiveCamera,
  WebGLRenderTarget,
  RGBFormat,
  NearestFilter,
  NearestFilter,
  DepthStencilFormat,
  DepthTexture,
  OrthographicCamera,
  ShaderMaterial,
  PlaneGeometry,
  Mesh,
  Scene,
  Scene,
  TorusKnotGeometry,
  MeshBasicMaterial,
  Mesh,
  Vector2,
  Color,
  PerspectiveCamera,
  OrthographicCamera,
  Scene,
  Scene,
  BufferGeometry,
  Float32BufferAttribute,
  BufferAttribute,
  DynamicDrawUsage,
  LineBasicMaterial,
  Line,
  DataTexture,
  RGBFormat,
  NearestFilter,
  NearestFilter,
  SpriteMaterial,
  Sprite,
  WebGLRenderer,
  Scene,
  Color,
  Scene,
  PerspectiveCamera,
  OrthographicCamera,
  Sprite,
  SpriteMaterial,
  CanvasTexture,
  Mesh,
  MeshLambertMaterial,
  DoubleSide,
  PointLight,
  WebGLRenderer,
  BufferGeometryLoader,
  Float32BufferAttribute,
  PerspectiveCamera,
  Scene,
  Color,
  AmbientLight,
  DirectionalLight,
  Group,
  Vector4,
  MathUtils,
  BufferGeometry,
  LineBasicMaterial,
  Line,
  BufferGeometry,
  LineBasicMaterial,
  Line,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  TextureLoader,
  RepeatWrapping,
  ParametricBufferGeometry,
  MeshLambertMaterial,
  DoubleSide,
  Mesh,
  WebGLRenderer,
  Vector3,
  Raycaster,
  Vector2,
  Vector2,
  Vector2,
  BoxGeometry,
  Scene,
  Color,
  PerspectiveCamera,
  AmbientLight,
  SpotLight,
  PlaneGeometry,
  ShadowMaterial,
  Mesh,
  GridHelper,
  WebGLRenderer,
  BufferGeometry,
  BufferAttribute,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  MeshLambertMaterial,
  Mesh,
  Vector3,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  FogExp2,
  PlaneGeometry,
  CanvasTexture,
  ClampToEdgeWrapping,
  ClampToEdgeWrapping,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  Vector3,
  Vector3,
  Cache,
  PerspectiveCamera,
  Vector3,
  Scene,
  Color,
  Fog,
  DirectionalLight,
  PointLight,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Group,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  WebGLRenderer,
  FontLoader,
  TextGeometry,
  Mesh,
  Mesh,
  PerspectiveCamera,
  Scene,
  Color,
  FontLoader,
  LineBasicMaterial,
  DoubleSide,
  MeshBasicMaterial,
  DoubleSide,
  ShapeGeometry,
  Mesh,
  Object3D,
  BufferGeometry,
  Line,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  FontLoader,
  Color,
  MeshBasicMaterial,
  DoubleSide,
  MeshBasicMaterial,
  DoubleSide,
  ShapeGeometry,
  Mesh,
  Group,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  PointLight,
  PointLightHelper,
  GridHelper,
  PolarGridHelper,
  Group,
  BoxHelper,
  WireframeGeometry,
  LineSegments,
  BoxHelper,
  EdgesGeometry,
  LineSegments,
  BoxHelper,
  BoxHelper,
  BoxHelper,
  Vector3,
  Euler,
  Quaternion,
  Vector3,
  BufferGeometryLoader,
  MeshNormalMaterial,
  Matrix4,
  InstancedMesh,
  Matrix4,
  Mesh,
  Matrix4,
  Mesh,
  PerspectiveCamera,
  WebGLRenderer,
  sRGBEncoding,
  Scene,
  Color,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  BufferGeometry,
  Color,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  BufferAttribute,
  BufferAttribute,
  BufferAttribute,
  MeshPhongMaterial,
  DoubleSide,
  Mesh,
  Raycaster,
  Vector2,
  BufferGeometry,
  BufferAttribute,
  LineBasicMaterial,
  Line,
  WebGLRenderer,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Vector2,
  Vector3,
  PerspectiveCamera,
  Scene,
  Color,
  Scene,
  WebGLRenderTarget,
  AmbientLight,
  SpotLight,
  MeshBasicMaterial,
  MeshPhongMaterial,
  Float32BufferAttribute,
  Matrix4,
  Quaternion,
  Color,
  BoxGeometry,
  Vector3,
  Euler,
  Vector3,
  Mesh,
  Mesh,
  Mesh,
  BoxGeometry,
  MeshLambertMaterial,
  WebGLRenderer,
  Vector2,
  OrthographicCamera,
  Scene,
  Color,
  DirectionalLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  BufferGeometry,
  Vector3,
  Vector3,
  Float32BufferAttribute,
  Object3D,
  LineBasicMaterial,
  Line,
  LineSegments,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Scene,
  PerspectiveCamera,
  BoxGeometry,
  Color,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  ShaderMaterial,
  Color,
  TextureLoader,
  Points,
  WebGLRenderer,
  Raycaster,
  Vector2,
  Vector2,
  Matrix4,
  BufferGeometry,
  BufferAttribute,
  BufferAttribute,
  PointsMaterial,
  Points,
  BufferAttribute,
  PointsMaterial,
  Points,
  BufferAttribute,
  PointsMaterial,
  Points,
  Scene,
  Clock,
  PerspectiveCamera,
  Color,
  Color,
  Color,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  Raycaster,
  PerspectiveCamera,
  Scene,
  Color,
  BoxGeometry,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  MeshLambertMaterial,
  TextureLoader,
  GridHelper,
  Raycaster,
  Vector2,
  PlaneGeometry,
  Mesh,
  MeshBasicMaterial,
  AmbientLight,
  DirectionalLight,
  WebGLRenderer,
  Mesh,
  PerspectiveCamera,
  Scene,
  Color,
  PointLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  HemisphereLight,
  HemisphereLightHelper,
  DirectionalLight,
  DirectionalLightHelper,
  PlaneGeometry,
  MeshLambertMaterial,
  Mesh,
  Color,
  Color,
  SphereGeometry,
  ShaderMaterial,
  BackSide,
  Mesh,
  AnimationMixer,
  WebGLRenderer,
  sRGBEncoding,
  Clock,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PerspectiveCamera,
  Color,
  Vector3,
  CatmullRomCurve3,
  Vector3,
  Color,
  Line,
  BufferGeometry,
  LineBasicMaterial,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  LineBasicMaterial,
  LineDashedMaterial,
  Line,
  PerspectiveCamera,
  Vector3,
  Scene,
  Color,
  Fog,
  DirectionalLight,
  PointLight,
  MeshPhongMaterial,
  Group,
  Font,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  WebGLRenderer,
  TextGeometry,
  Mesh,
  Mesh,
  Vector3,
  Scene,
  Color,
  PerspectiveCamera,
  DirectionalLight,
  DirectionalLight,
  Group,
  WebGLRenderer,
  BoxGeometry,
  IcosahedronGeometry,
  Vector3,
  Color,
  MeshPhongMaterial,
  Mesh,
  Vector3,
  Vector3,
  Mesh,
  MeshPhongMaterial,
  PerspectiveCamera,
  WebGLRenderer,
  ACESFilmicToneMapping,
  PMREMGenerator,
  Scene,
  Color,
  Box3,
  Vector3,
  Vector3,
  Clock,
  PerspectiveCamera,
  Scene,
  Fog,
  PointLight,
  DirectionalLight,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  MeshLambertMaterial,
  LOD,
  Mesh,
  WebGLRenderer,
  TextureLoader,
  PerspectiveCamera,
  Scene,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  MeshBasicMaterial,
  Mesh,
  PlaneGeometry,
  NoBlending,
  NormalBlending,
  AdditiveBlending,
  SubtractiveBlending,
  MultiplyBlending,
  PlaneGeometry,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  WebGLRenderer,
  CanvasTexture,
  MeshBasicMaterial,
  PerspectiveCamera,
  Scene,
  TextureLoader,
  CanvasTexture,
  RepeatWrapping,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  MeshBasicMaterial,
  Mesh,
  PlaneGeometry,
  ZeroFactor,
  OneFactor,
  SrcColorFactor,
  OneMinusSrcColorFactor,
  SrcAlphaFactor,
  OneMinusSrcAlphaFactor,
  DstAlphaFactor,
  OneMinusDstAlphaFactor,
  DstColorFactor,
  OneMinusDstColorFactor,
  SrcAlphaSaturateFactor,
  ZeroFactor,
  OneFactor,
  SrcColorFactor,
  OneMinusSrcColorFactor,
  SrcAlphaFactor,
  OneMinusSrcAlphaFactor,
  DstAlphaFactor,
  OneMinusDstAlphaFactor,
  DstColorFactor,
  OneMinusDstColorFactor,
  PlaneGeometry,
  PlaneGeometry,
  MeshBasicMaterial,
  CustomBlending,
  AddEquation,
  Mesh,
  Mesh,
  Mesh,
  WebGLRenderer,
  AddEquation,
  SubtractEquation,
  ReverseSubtractEquation,
  MinEquation,
  MaxEquation,
  CanvasTexture,
  MeshBasicMaterial,
  FrontSide,
  BackSide,
  DoubleSide,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  OrthographicCamera,
  AmbientLight,
  PointLight,
  PointLight,
  PointLight,
  TextureLoader,
  MeshStandardMaterial,
  Vector2,
  DoubleSide,
  MeshDepthMaterial,
  BasicDepthPacking,
  DoubleSide,
  MeshDepthMaterial,
  RGBADepthPacking,
  DoubleSide,
  MeshNormalMaterial,
  Vector2,
  DoubleSide,
  Mesh,
  FrontSide,
  BackSide,
  DoubleSide,
  CubeTextureLoader,
  LinearMipMapLinearFilter,
  LinearFilter,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  WebGLRenderer,
  ACESFilmicToneMapping,
  TorusKnotGeometry,
  SphereGeometry,
  MeshStandardMaterial,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  DefaultLoadingManager,
  UnsignedByteType,
  LinearFilter,
  CubeTextureLoader,
  sRGBEncoding,
  RGBM16Encoding,
  PMREMGenerator,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  DirectionalLight,
  Color,
  Color,
  SphereGeometry,
  ShaderMaterial,
  BackSide,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  ObjectLoader,
  PerspectiveCamera,
  Scene,
  Group,
  SphereGeometry,
  TextureLoader,
  sRGBEncoding,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  MeshPhysicalMaterial,
  Vector2,
  Mesh,
  MeshPhysicalMaterial,
  Mesh,
  MeshPhysicalMaterial,
  Vector2,
  Mesh,
  MeshPhysicalMaterial,
  Vector2,
  Vector2,
  Mesh,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  WebGLRenderer,
  ACESFilmicToneMapping,
  sRGBEncoding,
  EquirectangularReflectionMapping,
  WebGLRenderer,
  ACESFilmicToneMapping,
  sRGBEncoding,
  Scene,
  PerspectiveCamera,
  SphereGeometry,
  CanvasTexture,
  NearestFilter,
  RepeatWrapping,
  RepeatWrapping,
  MeshPhysicalMaterial,
  DoubleSide,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  ReinhardToneMapping,
  Scene,
  PerspectiveCamera,
  HemisphereLight,
  MeshStandardMaterial,
  TextureLoader,
  sRGBEncoding,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  EquirectangularReflectionMapping,
  Vector2,
  PerspectiveCamera,
  Scene,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  WebGLRenderer,
  CanvasTexture,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Scene,
  Color,
  Fog,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  NearestFilter,
  NearestFilter,
  MeshBasicMaterial,
  MeshBasicMaterial,
  PlaneGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  Mesh,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
  TextureLoader,
  Texture,
  MeshBasicMaterial,
  MeshBasicMaterial,
  NearestFilter,
  LinearFilter,
  UVMapping,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Scene,
  Color,
  Fog,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  NearestFilter,
  NearestMipmapNearestFilter,
  MeshBasicMaterial,
  MeshBasicMaterial,
  PlaneGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  Mesh,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
  TextureLoader,
  Texture,
  MeshBasicMaterial,
  MeshBasicMaterial,
  NearestFilter,
  LinearFilter,
  UVMapping,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  DirectionalLight,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  WebGLRenderer,
  sRGBEncoding,
  TextureLoader,
  RepeatWrapping,
  UniformsUtils,
  Vector3,
  Vector3,
  ShaderMaterial,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  BufferGeometryLoader,
  MeshBasicMaterial,
  Mesh,
  ShaderMaterial,
  DoubleSide,
  Mesh,
  Vector3,
  Vector3,
  Vector3,
  BufferAttribute,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  Clock,
  Raycaster,
  HemisphereLight,
  Vector3,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  Vector3,
  Spherical,
  Matrix4,
  Quaternion,
  Clock,
  PerspectiveCamera,
  Scene,
  ConeGeometry,
  MeshNormalMaterial,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  CircleGeometry,
  PlaneGeometry,
  Object3D,
  CylinderGeometry,
  MeshPhongMaterial,
  Mesh,
  SphereGeometry,
  Mesh,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  Plane,
  Vector3,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  PerspectiveCamera,
  CameraHelper,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  DirectionalLight,
  AnimationMixer,
  WebGLRenderer,
  sRGBEncoding,
  MathUtils,
  MathUtils,
  BoxGeometry,
  SphereGeometry,
  DodecahedronGeometry,
  CylinderGeometry,
  Scene,
  PerspectiveCamera,
  MeshStandardMaterial,
  Color,
  Mesh,
  HemisphereLight,
  DirectionalLight,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  Color,
  BufferGeometry,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  CanvasTexture,
  PointsMaterial,
  Points,
  PerspectiveCamera,
  Vector3,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  Texture,
  ImageLoader,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  TextureLoader,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  PerspectiveCamera,
  Scene,
  FogExp2,
  BufferGeometry,
  TextureLoader,
  Float32BufferAttribute,
  PointsMaterial,
  Points,
  WebGLRenderer,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  FogExp2,
  WebGLRenderer,
  Object3D,
  Points,
  PlaneGeometry,
  PointsMaterial,
  BufferAttribute,
  BufferGeometry,
  DynamicDrawUsage,
  Points,
  PointsMaterial,
  PerspectiveCamera,
  Scene,
  FogExp2,
  BufferGeometry,
  TextureLoader,
  Float32BufferAttribute,
  PointsMaterial,
  AdditiveBlending,
  Points,
  WebGLRenderer,
  Points,
} from "three";

import Stats from "three/examples/jsm/libs/stats.module.js";

import { GUI } from "three/examples/jsm/libs/dat.gui.module.js";

let camera, scene, renderer, stats, parameters;
let mouseX = 0,
  mouseY = 0;

let windowHalfX = window.innerWidth / 2;
let windowHalfY = window.innerHeight / 2;

const materials = [];

init();
animate();

function init() {
  camera = new PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    1,
    2000
  );
  camera.position.z = 1000;

  scene = new Scene();
  scene.fog = new FogExp2(0x000000, 0.0008);

  const geometry = new BufferGeometry();
  const vertices = [];

  const textureLoader = new TextureLoader();

  const sprite1 = textureLoader.load("textures/sprites/snowflake1.png");
  const sprite2 = textureLoader.load("textures/sprites/snowflake2.png");
  const sprite3 = textureLoader.load("textures/sprites/snowflake3.png");
  const sprite4 = textureLoader.load("textures/sprites/snowflake4.png");
  const sprite5 = textureLoader.load("textures/sprites/snowflake5.png");

  for (let i = 0; i < 10000; i++) {
    const x = Math.random() * 2000 - 1000;
    const y = Math.random() * 2000 - 1000;
    const z = Math.random() * 2000 - 1000;

    vertices.push(x, y, z);
  }

  geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));

  parameters = [
    [[1.0, 0.2, 0.5], sprite2, 20],
    [[0.95, 0.1, 0.5], sprite3, 15],
    [[0.9, 0.05, 0.5], sprite1, 10],
    [[0.85, 0, 0.5], sprite5, 8],
    [[0.8, 0, 0.5], sprite4, 5],
  ];

  for (let i = 0; i < parameters.length; i++) {
    const color = parameters[i][0];
    const sprite = parameters[i][1];
    const size = parameters[i][2];

    materials[i] = new PointsMaterial({
      size: size,
      map: sprite,
      blending: AdditiveBlending,
      depthTest: false,
      transparent: true,
    });
    materials[i].color.setHSL(color[0], color[1], color[2]);

    const particles = new Points(geometry, materials[i]);

    particles.rotation.x = Math.random() * 6;
    particles.rotation.y = Math.random() * 6;
    particles.rotation.z = Math.random() * 6;

    scene.add(particles);
  }

  //

  renderer = new WebGLRenderer();
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  //

  stats = new Stats();
  document.body.appendChild(stats.dom);

  //

  const gui = new GUI();

  const params = {
    texture: true,
  };

  gui.add(params, "texture").onChange(function (value) {
    for (let i = 0; i < materials.length; i++) {
      materials[i].map = value === true ? parameters[i][1] : null;
      materials[i].needsUpdate = true;
    }
  });

  gui.open();

  document.body.style.touchAction = "none";
  document.body.addEventListener("pointermove", onPointerMove);

  //

  window.addEventListener("resize", onWindowResize);
}

function onWindowResize() {
  windowHalfX = window.innerWidth / 2;
  windowHalfY = window.innerHeight / 2;

  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize(window.innerWidth, window.innerHeight);
}

function onPointerMove(event) {
  if (event.isPrimary === false) return;

  mouseX = event.clientX - windowHalfX;
  mouseY = event.clientY - windowHalfY;
}

//

function animate() {
  requestAnimationFrame(animate);

  render();
  stats.update();
}

function render() {
  const time = Date.now() * 0.00005;

  camera.position.x += (mouseX - camera.position.x) * 0.05;
  camera.position.y += (-mouseY - camera.position.y) * 0.05;

  camera.lookAt(scene.position);

  for (let i = 0; i < scene.children.length; i++) {
    const object = scene.children[i];

    if (object instanceof Points) {
      object.rotation.y = time * (i < 4 ? i + 1 : -(i + 1));
    }
  }

  for (let i = 0; i < materials.length; i++) {
    const color = parameters[i][0];

    const h = ((360 * (color[0] + time)) % 360) / 360;
    materials[i].color.setHSL(h, color[1], color[2]);
  }

  renderer.render(scene, camera);
}
