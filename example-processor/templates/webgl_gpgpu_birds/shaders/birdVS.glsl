"\n\n\t\t\tattribute vec2 reference;\n\t\t\tattribute float birdVertex;\n\n\t\t\tattribute vec3 birdColor;\n\n\t\t\tuniform sampler2D texturePosition;\n\t\t\tuniform sampler2D textureVelocity;\n\n\t\t\tvarying vec4 vColor;\n\t\t\tvarying float z;\n\n\t\t\tuniform float time;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec4 tmpPos = texture2D( texturePosition, reference );\n\t\t\t\tvec3 pos = tmpPos.xyz;\n\t\t\t\tvec3 velocity = normalize(texture2D( textureVelocity, reference ).xyz);\n\n\t\t\t\tvec3 newPosition = position;\n\n\t\t\t\tif ( birdVertex == 4.0 || birdVertex == 7.0 ) {\n\t\t\t\t\t// flap wings\n\t\t\t\t\tnewPosition.y = sin( tmpPos.w ) * 5.;\n\t\t\t\t}\n\n\t\t\t\tnewPosition = mat3( modelMatrix ) * newPosition;\n\n\n\t\t\t\tvelocity.z *= -1.;\n\t\t\t\tfloat xz = length( velocity.xz );\n\t\t\t\tfloat xyz = 1.;\n\t\t\t\tfloat x = sqrt( 1. - velocity.y * velocity.y );\n\n\t\t\t\tfloat cosry = velocity.x / xz;\n\t\t\t\tfloat sinry = velocity.z / xz;\n\n\t\t\t\tfloat cosrz = x / xyz;\n\t\t\t\tfloat sinrz = velocity.y / xyz;\n\n\t\t\t\tmat3 maty =  mat3(\n\t\t\t\t\tcosry, 0, -sinry,\n\t\t\t\t\t0    , 1, 0     ,\n\t\t\t\t\tsinry, 0, cosry\n\n\t\t\t\t);\n\n\t\t\t\tmat3 matz =  mat3(\n\t\t\t\t\tcosrz , sinrz, 0,\n\t\t\t\t\t-sinrz, cosrz, 0,\n\t\t\t\t\t0     , 0    , 1\n\t\t\t\t);\n\n\t\t\t\tnewPosition =  maty * matz * newPosition;\n\t\t\t\tnewPosition += pos;\n\n\t\t\t\tz = newPosition.z;\n\n\t\t\t\tvColor = vec4( birdColor, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix *  viewMatrix  * vec4( newPosition, 1.0 );\n\t\t\t}\n\n\t\t"