import "./style.css"; // For webpack support

import {
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Scene,
  Color,
  Fog,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  TextureLoader,
  MeshLambertMaterial,
  DoubleSide,
  ParametricBufferGeometry,
  Mesh,
  SphereGeometry,
  MeshLambertMaterial,
  Mesh,
  RepeatWrapping,
  sRGBEncoding,
  MeshLambertMaterial,
  Mesh,
  PlaneGeometry,
  BoxGeometry,
  MeshLambertMaterial,
  Mesh,
  Mesh,
  Mesh,
  BoxGeometry,
  BoxGeometry,
  Mesh,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  DirectionalLight,
  Plane,
  Vector3,
  Plane,
  Vector3,
  MeshPhongMaterial,
  DoubleSide,
  TorusKnotGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  MeshPhongMaterial,
  WebGLRenderer,
  Plane,
  Plane,
  Vector3,
  Vector3,
  Vector3,
  Matrix4,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  DirectionalLight,
  MeshPhongMaterial,
  DoubleSide,
  Group,
  BoxGeometry,
  Mesh,
  PlaneGeometry,
  Color,
  Group,
  MeshBasicMaterial,
  DoubleSide,
  Mesh,
  Mesh,
  MeshPhongMaterial,
  WebGLRenderer,
  Matrix4,
  Matrix4,
  Plane,
  Vector3,
  Plane,
  Vector3,
  Plane,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  HemisphereLight,
  CameraHelper,
  Group,
  SphereGeometry,
  MeshLambertMaterial,
  Color,
  DoubleSide,
  Mesh,
  Group,
  PlaneHelper,
  PlaneHelper,
  PlaneHelper,
  Group,
  MeshBasicMaterial,
  AlwaysStencilFunc,
  BackSide,
  IncrementWrapStencilOp,
  IncrementWrapStencilOp,
  IncrementWrapStencilOp,
  Mesh,
  FrontSide,
  DecrementWrapStencilOp,
  DecrementWrapStencilOp,
  DecrementWrapStencilOp,
  Mesh,
  Clock,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  Plane,
  Vector3,
  Plane,
  Vector3,
  Plane,
  Vector3,
  PlaneHelper,
  TorusKnotGeometry,
  Group,
  PlaneGeometry,
  Group,
  MeshStandardMaterial,
  NotEqualStencilFunc,
  ReplaceStencilOp,
  ReplaceStencilOp,
  ReplaceStencilOp,
  Mesh,
  MeshStandardMaterial,
  DoubleSide,
  Mesh,
  Mesh,
  PlaneGeometry,
  ShadowMaterial,
  DoubleSide,
  WebGLRenderer,
  Vector3,
  Vector3,
  Vector2,
  TextureLoader,
  MeshPhongMaterial,
  Vector2,
  Vector3,
  Euler,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  BufferGeometry,
  Vector3,
  Vector3,
  Line,
  LineBasicMaterial,
  Raycaster,
  Mesh,
  BoxGeometry,
  MeshNormalMaterial,
  MeshPhongMaterial,
  Mesh,
  DepthFormat,
  UnsignedShortType,
  DepthFormat,
  DepthStencilFormat,
  UnsignedShortType,
  UnsignedIntType,
  UnsignedInt248Type,
  WebGLRenderer,
  PerspectiveCamera,
  WebGLRenderTarget,
  RGBFormat,
  NearestFilter,
  NearestFilter,
  DepthStencilFormat,
  DepthTexture,
  OrthographicCamera,
  ShaderMaterial,
  PlaneGeometry,
  Mesh,
  Scene,
  Scene,
  TorusKnotGeometry,
  MeshBasicMaterial,
  Mesh,
  Vector2,
  Color,
  PerspectiveCamera,
  OrthographicCamera,
  Scene,
  Scene,
  BufferGeometry,
  Float32BufferAttribute,
  BufferAttribute,
  DynamicDrawUsage,
  LineBasicMaterial,
  Line,
  DataTexture,
  RGBFormat,
  NearestFilter,
  NearestFilter,
  SpriteMaterial,
  Sprite,
  WebGLRenderer,
  Scene,
  Color,
  Scene,
  PerspectiveCamera,
  OrthographicCamera,
  Sprite,
  SpriteMaterial,
  CanvasTexture,
  Mesh,
  MeshLambertMaterial,
  DoubleSide,
  PointLight,
  WebGLRenderer,
  BufferGeometryLoader,
  Float32BufferAttribute,
  PerspectiveCamera,
  Scene,
  Color,
  AmbientLight,
  DirectionalLight,
  Group,
  Vector4,
  MathUtils,
  BufferGeometry,
  LineBasicMaterial,
  Line,
  BufferGeometry,
  LineBasicMaterial,
  Line,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  TextureLoader,
  RepeatWrapping,
  ParametricBufferGeometry,
  MeshLambertMaterial,
  DoubleSide,
  Mesh,
  WebGLRenderer,
  Vector3,
  Raycaster,
  Vector2,
  Vector2,
  Vector2,
  BoxGeometry,
  Scene,
  Color,
  PerspectiveCamera,
  AmbientLight,
  SpotLight,
  PlaneGeometry,
  ShadowMaterial,
  Mesh,
  GridHelper,
  WebGLRenderer,
  BufferGeometry,
  BufferAttribute,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  MeshLambertMaterial,
  Mesh,
  Vector3,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  FogExp2,
  PlaneGeometry,
  CanvasTexture,
  ClampToEdgeWrapping,
  ClampToEdgeWrapping,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  Vector3,
  Vector3,
  Cache,
  PerspectiveCamera,
  Vector3,
  Scene,
  Color,
  Fog,
  DirectionalLight,
  PointLight,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Group,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  WebGLRenderer,
  FontLoader,
  TextGeometry,
  Mesh,
  Mesh,
  PerspectiveCamera,
  Scene,
  Color,
  FontLoader,
  LineBasicMaterial,
  DoubleSide,
  MeshBasicMaterial,
  DoubleSide,
  ShapeGeometry,
  Mesh,
  Object3D,
  BufferGeometry,
  Line,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  FontLoader,
  Color,
  MeshBasicMaterial,
  DoubleSide,
  MeshBasicMaterial,
  DoubleSide,
  ShapeGeometry,
  Mesh,
  Group,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  PointLight,
  PointLightHelper,
  GridHelper,
  PolarGridHelper,
  Group,
  BoxHelper,
  WireframeGeometry,
  LineSegments,
  BoxHelper,
  EdgesGeometry,
  LineSegments,
  BoxHelper,
  BoxHelper,
  BoxHelper,
  Vector3,
  Euler,
  Quaternion,
  Vector3,
  BufferGeometryLoader,
  MeshNormalMaterial,
  Matrix4,
  InstancedMesh,
  Matrix4,
  Mesh,
  Matrix4,
  Mesh,
  PerspectiveCamera,
  WebGLRenderer,
  sRGBEncoding,
  Scene,
  Color,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  BufferGeometry,
  Color,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  BufferAttribute,
  BufferAttribute,
  BufferAttribute,
  MeshPhongMaterial,
  DoubleSide,
  Mesh,
  Raycaster,
  Vector2,
  BufferGeometry,
  BufferAttribute,
  LineBasicMaterial,
  Line,
  WebGLRenderer,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Vector2,
  Vector3,
  PerspectiveCamera,
  Scene,
  Color,
  Scene,
  WebGLRenderTarget,
  AmbientLight,
  SpotLight,
  MeshBasicMaterial,
  MeshPhongMaterial,
  Float32BufferAttribute,
  Matrix4,
  Quaternion,
  Color,
  BoxGeometry,
  Vector3,
  Euler,
  Vector3,
  Mesh,
  Mesh,
  Mesh,
  BoxGeometry,
  MeshLambertMaterial,
  WebGLRenderer,
  Vector2,
  OrthographicCamera,
  Scene,
  Color,
  DirectionalLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  BufferGeometry,
  Vector3,
  Vector3,
  Float32BufferAttribute,
  Object3D,
  LineBasicMaterial,
  Line,
  LineSegments,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Scene,
  PerspectiveCamera,
  BoxGeometry,
  Color,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  ShaderMaterial,
  Color,
  TextureLoader,
  Points,
  WebGLRenderer,
  Raycaster,
  Vector2,
  Vector2,
  Matrix4,
  BufferGeometry,
  BufferAttribute,
  BufferAttribute,
  PointsMaterial,
  Points,
  BufferAttribute,
  PointsMaterial,
  Points,
  BufferAttribute,
  PointsMaterial,
  Points,
  Scene,
  Clock,
  PerspectiveCamera,
  Color,
  Color,
  Color,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  Raycaster,
  PerspectiveCamera,
  Scene,
  Color,
  BoxGeometry,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  MeshLambertMaterial,
  TextureLoader,
  GridHelper,
  Raycaster,
  Vector2,
  PlaneGeometry,
  Mesh,
  MeshBasicMaterial,
  AmbientLight,
  DirectionalLight,
  WebGLRenderer,
  Mesh,
  PerspectiveCamera,
  Scene,
  Color,
  PointLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  HemisphereLight,
  HemisphereLightHelper,
  DirectionalLight,
  DirectionalLightHelper,
  PlaneGeometry,
  MeshLambertMaterial,
  Mesh,
  Color,
  Color,
  SphereGeometry,
  ShaderMaterial,
  BackSide,
  Mesh,
  AnimationMixer,
  WebGLRenderer,
  sRGBEncoding,
  Clock,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PerspectiveCamera,
  Color,
  Vector3,
  CatmullRomCurve3,
  Vector3,
  Color,
  Line,
  BufferGeometry,
  LineBasicMaterial,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  LineBasicMaterial,
  LineDashedMaterial,
  Line,
  PerspectiveCamera,
  Vector3,
  Scene,
  Color,
  Fog,
  DirectionalLight,
  PointLight,
  MeshPhongMaterial,
  Group,
  Font,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  WebGLRenderer,
  TextGeometry,
  Mesh,
  Mesh,
  Vector3,
  Scene,
  Color,
  PerspectiveCamera,
  DirectionalLight,
  DirectionalLight,
  Group,
  WebGLRenderer,
  BoxGeometry,
  IcosahedronGeometry,
  Vector3,
  Color,
  MeshPhongMaterial,
  Mesh,
  Vector3,
  Vector3,
  Mesh,
  MeshPhongMaterial,
  PerspectiveCamera,
  WebGLRenderer,
  ACESFilmicToneMapping,
  PMREMGenerator,
  Scene,
  Color,
  Box3,
  Vector3,
  Vector3,
  Clock,
  PerspectiveCamera,
  Scene,
  Fog,
  PointLight,
  DirectionalLight,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  MeshLambertMaterial,
  LOD,
  Mesh,
  WebGLRenderer,
  TextureLoader,
  PerspectiveCamera,
  Scene,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  MeshBasicMaterial,
  Mesh,
  PlaneGeometry,
  NoBlending,
  NormalBlending,
  AdditiveBlending,
  SubtractiveBlending,
  MultiplyBlending,
  PlaneGeometry,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  WebGLRenderer,
  CanvasTexture,
  MeshBasicMaterial,
  PerspectiveCamera,
  Scene,
  TextureLoader,
  CanvasTexture,
  RepeatWrapping,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  MeshBasicMaterial,
  Mesh,
  PlaneGeometry,
  ZeroFactor,
  OneFactor,
  SrcColorFactor,
  OneMinusSrcColorFactor,
  SrcAlphaFactor,
  OneMinusSrcAlphaFactor,
  DstAlphaFactor,
  OneMinusDstAlphaFactor,
  DstColorFactor,
  OneMinusDstColorFactor,
  SrcAlphaSaturateFactor,
  ZeroFactor,
  OneFactor,
  SrcColorFactor,
  OneMinusSrcColorFactor,
  SrcAlphaFactor,
  OneMinusSrcAlphaFactor,
  DstAlphaFactor,
  OneMinusDstAlphaFactor,
  DstColorFactor,
  OneMinusDstColorFactor,
  PlaneGeometry,
  PlaneGeometry,
  MeshBasicMaterial,
  CustomBlending,
  AddEquation,
  Mesh,
  Mesh,
  Mesh,
  WebGLRenderer,
  AddEquation,
  SubtractEquation,
  ReverseSubtractEquation,
  MinEquation,
  MaxEquation,
  CanvasTexture,
  MeshBasicMaterial,
  FrontSide,
  BackSide,
  DoubleSide,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  OrthographicCamera,
  AmbientLight,
  PointLight,
  PointLight,
  PointLight,
  TextureLoader,
  MeshStandardMaterial,
  Vector2,
  DoubleSide,
  MeshDepthMaterial,
  BasicDepthPacking,
  DoubleSide,
  MeshDepthMaterial,
  RGBADepthPacking,
  DoubleSide,
  MeshNormalMaterial,
  Vector2,
  DoubleSide,
  Mesh,
  FrontSide,
  BackSide,
  DoubleSide,
  CubeTextureLoader,
  LinearMipMapLinearFilter,
  LinearFilter,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  WebGLRenderer,
  ACESFilmicToneMapping,
  TorusKnotGeometry,
  SphereGeometry,
  MeshStandardMaterial,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  DefaultLoadingManager,
  UnsignedByteType,
  LinearFilter,
  CubeTextureLoader,
  sRGBEncoding,
  RGBM16Encoding,
  PMREMGenerator,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  DirectionalLight,
  Color,
  Color,
  SphereGeometry,
  ShaderMaterial,
  BackSide,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  ObjectLoader,
  PerspectiveCamera,
  Scene,
  Group,
  SphereGeometry,
  TextureLoader,
  sRGBEncoding,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  MeshPhysicalMaterial,
  Vector2,
  Mesh,
  MeshPhysicalMaterial,
  Mesh,
  MeshPhysicalMaterial,
  Vector2,
  Mesh,
  MeshPhysicalMaterial,
  Vector2,
  Vector2,
  Mesh,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  WebGLRenderer,
  ACESFilmicToneMapping,
  sRGBEncoding,
  EquirectangularReflectionMapping,
  WebGLRenderer,
  ACESFilmicToneMapping,
  sRGBEncoding,
  Scene,
  PerspectiveCamera,
  SphereGeometry,
  CanvasTexture,
  NearestFilter,
  RepeatWrapping,
  RepeatWrapping,
  MeshPhysicalMaterial,
  DoubleSide,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  ReinhardToneMapping,
  Scene,
  PerspectiveCamera,
  HemisphereLight,
  MeshStandardMaterial,
  TextureLoader,
  sRGBEncoding,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  EquirectangularReflectionMapping,
  Vector2,
  PerspectiveCamera,
  Scene,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  WebGLRenderer,
  CanvasTexture,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Scene,
  Color,
  Fog,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  NearestFilter,
  NearestFilter,
  MeshBasicMaterial,
  MeshBasicMaterial,
  PlaneGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  Mesh,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
  TextureLoader,
  Texture,
  MeshBasicMaterial,
  MeshBasicMaterial,
  NearestFilter,
  LinearFilter,
  UVMapping,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Scene,
  Color,
  Fog,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  NearestFilter,
  NearestMipmapNearestFilter,
  MeshBasicMaterial,
  MeshBasicMaterial,
  PlaneGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  Mesh,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
  TextureLoader,
  Texture,
  MeshBasicMaterial,
  MeshBasicMaterial,
  NearestFilter,
  LinearFilter,
  UVMapping,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  DirectionalLight,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  WebGLRenderer,
  sRGBEncoding,
  TextureLoader,
  RepeatWrapping,
  UniformsUtils,
  Vector3,
  Vector3,
  ShaderMaterial,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  BufferGeometryLoader,
  MeshBasicMaterial,
  Mesh,
  ShaderMaterial,
  DoubleSide,
  Mesh,
  Vector3,
  Vector3,
  Vector3,
  BufferAttribute,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  Clock,
  Raycaster,
  HemisphereLight,
  Vector3,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  Vector3,
  Spherical,
  Matrix4,
  Quaternion,
  Clock,
  PerspectiveCamera,
  Scene,
  ConeGeometry,
  MeshNormalMaterial,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  CircleGeometry,
  PlaneGeometry,
  Object3D,
  CylinderGeometry,
  MeshPhongMaterial,
  Mesh,
  SphereGeometry,
  Mesh,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  Plane,
  Vector3,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  PerspectiveCamera,
  CameraHelper,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  DirectionalLight,
  AnimationMixer,
  WebGLRenderer,
  sRGBEncoding,
  MathUtils,
  MathUtils,
  BoxGeometry,
  SphereGeometry,
  DodecahedronGeometry,
  CylinderGeometry,
  Scene,
  PerspectiveCamera,
  MeshStandardMaterial,
  Color,
  Mesh,
  HemisphereLight,
  DirectionalLight,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  Color,
  BufferGeometry,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  CanvasTexture,
  PointsMaterial,
  Points,
  PerspectiveCamera,
  Vector3,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  Texture,
  ImageLoader,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  TextureLoader,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
} from "three";

let camera, scene, renderer;

let isUserInteracting = false,
  onPointerDownMouseX = 0,
  onPointerDownMouseY = 0,
  lon = 0,
  onPointerDownLon = 0,
  lat = 0,
  onPointerDownLat = 0,
  phi = 0,
  theta = 0;

init();
animate();

function init() {
  const container = document.getElementById("container");

  camera = new PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    1,
    1100
  );

  scene = new Scene();

  const geometry = new SphereGeometry(500, 60, 40);
  // invert the geometry on the x-axis so that all of the faces point inward
  geometry.scale(-1, 1, 1);

  const texture = new TextureLoader().load(
    "textures/2294472375_24a3b8ef46_o.jpg"
  );
  const material = new MeshBasicMaterial({ map: texture });

  const mesh = new Mesh(geometry, material);

  scene.add(mesh);

  renderer = new WebGLRenderer();
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  container.appendChild(renderer.domElement);

  container.style.touchAction = "none";
  container.addEventListener("pointerdown", onPointerDown);

  document.addEventListener("wheel", onDocumentMouseWheel);

  //

  document.addEventListener("dragover", function (event) {
    event.preventDefault();
    event.dataTransfer.dropEffect = "copy";
  });

  document.addEventListener("dragenter", function () {
    document.body.style.opacity = 0.5;
  });

  document.addEventListener("dragleave", function () {
    document.body.style.opacity = 1;
  });

  document.addEventListener("drop", function (event) {
    event.preventDefault();

    const reader = new FileReader();
    reader.addEventListener("load", function (event) {
      material.map.image.src = event.target.result;
      material.map.needsUpdate = true;
    });
    reader.readAsDataURL(event.dataTransfer.files[0]);

    document.body.style.opacity = 1;
  });

  //

  window.addEventListener("resize", onWindowResize);
}

function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize(window.innerWidth, window.innerHeight);
}

function onPointerDown(event) {
  if (event.isPrimary === false) return;

  isUserInteracting = true;

  onPointerDownMouseX = event.clientX;
  onPointerDownMouseY = event.clientY;

  onPointerDownLon = lon;
  onPointerDownLat = lat;

  document.addEventListener("pointermove", onPointerMove);
  document.addEventListener("pointerup", onPointerUp);
}

function onPointerMove(event) {
  if (event.isPrimary === false) return;

  lon = (onPointerDownMouseX - event.clientX) * 0.1 + onPointerDownLon;
  lat = (event.clientY - onPointerDownMouseY) * 0.1 + onPointerDownLat;
}

function onPointerUp() {
  if (event.isPrimary === false) return;

  isUserInteracting = false;

  document.removeEventListener("pointermove", onPointerMove);
  document.removeEventListener("pointerup", onPointerUp);
}

function onDocumentMouseWheel(event) {
  const fov = camera.fov + event.deltaY * 0.05;

  camera.fov = MathUtils.clamp(fov, 10, 75);

  camera.updateProjectionMatrix();
}

function animate() {
  requestAnimationFrame(animate);
  update();
}

function update() {
  if (isUserInteracting === false) {
    lon += 0.1;
  }

  lat = Math.max(-85, Math.min(85, lat));
  phi = MathUtils.degToRad(90 - lat);
  theta = MathUtils.degToRad(lon);

  const x = 500 * Math.sin(phi) * Math.cos(theta);
  const y = 500 * Math.cos(phi);
  const z = 500 * Math.sin(phi) * Math.sin(theta);

  camera.lookAt(x, y, z);

  renderer.render(scene, camera);
}
