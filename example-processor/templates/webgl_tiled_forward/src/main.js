import "./style.css"; // For webpack support

import {
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Scene,
  Color,
  Fog,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  TextureLoader,
  MeshLambertMaterial,
  DoubleSide,
  ParametricBufferGeometry,
  Mesh,
  SphereGeometry,
  MeshLambertMaterial,
  Mesh,
  RepeatWrapping,
  sRGBEncoding,
  MeshLambertMaterial,
  Mesh,
  PlaneGeometry,
  BoxGeometry,
  MeshLambertMaterial,
  Mesh,
  Mesh,
  Mesh,
  BoxGeometry,
  BoxGeometry,
  Mesh,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  DirectionalLight,
  Plane,
  Vector3,
  Plane,
  Vector3,
  MeshPhongMaterial,
  DoubleSide,
  TorusKnotGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  MeshPhongMaterial,
  WebGLRenderer,
  Plane,
  Plane,
  Vector3,
  Vector3,
  Vector3,
  Matrix4,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  DirectionalLight,
  MeshPhongMaterial,
  DoubleSide,
  Group,
  BoxGeometry,
  Mesh,
  PlaneGeometry,
  Color,
  Group,
  MeshBasicMaterial,
  DoubleSide,
  Mesh,
  Mesh,
  MeshPhongMaterial,
  WebGLRenderer,
  Matrix4,
  Matrix4,
  Plane,
  Vector3,
  Plane,
  Vector3,
  Plane,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  HemisphereLight,
  CameraHelper,
  Group,
  SphereGeometry,
  MeshLambertMaterial,
  Color,
  DoubleSide,
  Mesh,
  Group,
  PlaneHelper,
  PlaneHelper,
  PlaneHelper,
  Group,
  MeshBasicMaterial,
  AlwaysStencilFunc,
  BackSide,
  IncrementWrapStencilOp,
  IncrementWrapStencilOp,
  IncrementWrapStencilOp,
  Mesh,
  FrontSide,
  DecrementWrapStencilOp,
  DecrementWrapStencilOp,
  DecrementWrapStencilOp,
  Mesh,
  Clock,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  Plane,
  Vector3,
  Plane,
  Vector3,
  Plane,
  Vector3,
  PlaneHelper,
  TorusKnotGeometry,
  Group,
  PlaneGeometry,
  Group,
  MeshStandardMaterial,
  NotEqualStencilFunc,
  ReplaceStencilOp,
  ReplaceStencilOp,
  ReplaceStencilOp,
  Mesh,
  MeshStandardMaterial,
  DoubleSide,
  Mesh,
  Mesh,
  PlaneGeometry,
  ShadowMaterial,
  DoubleSide,
  WebGLRenderer,
  Vector3,
  Vector3,
  Vector2,
  TextureLoader,
  MeshPhongMaterial,
  Vector2,
  Vector3,
  Euler,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  BufferGeometry,
  Vector3,
  Vector3,
  Line,
  LineBasicMaterial,
  Raycaster,
  Mesh,
  BoxGeometry,
  MeshNormalMaterial,
  MeshPhongMaterial,
  Mesh,
  DepthFormat,
  UnsignedShortType,
  DepthFormat,
  DepthStencilFormat,
  UnsignedShortType,
  UnsignedIntType,
  UnsignedInt248Type,
  WebGLRenderer,
  PerspectiveCamera,
  WebGLRenderTarget,
  RGBFormat,
  NearestFilter,
  NearestFilter,
  DepthStencilFormat,
  DepthTexture,
  OrthographicCamera,
  ShaderMaterial,
  PlaneGeometry,
  Mesh,
  Scene,
  Scene,
  TorusKnotGeometry,
  MeshBasicMaterial,
  Mesh,
  Vector2,
  Color,
  PerspectiveCamera,
  OrthographicCamera,
  Scene,
  Scene,
  BufferGeometry,
  Float32BufferAttribute,
  BufferAttribute,
  DynamicDrawUsage,
  LineBasicMaterial,
  Line,
  DataTexture,
  RGBFormat,
  NearestFilter,
  NearestFilter,
  SpriteMaterial,
  Sprite,
  WebGLRenderer,
  Scene,
  Color,
  Scene,
  PerspectiveCamera,
  OrthographicCamera,
  Sprite,
  SpriteMaterial,
  CanvasTexture,
  Mesh,
  MeshLambertMaterial,
  DoubleSide,
  PointLight,
  WebGLRenderer,
  BufferGeometryLoader,
  Float32BufferAttribute,
  PerspectiveCamera,
  Scene,
  Color,
  AmbientLight,
  DirectionalLight,
  Group,
  Vector4,
  MathUtils,
  BufferGeometry,
  LineBasicMaterial,
  Line,
  BufferGeometry,
  LineBasicMaterial,
  Line,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  Vector4,
  TextureLoader,
  RepeatWrapping,
  ParametricBufferGeometry,
  MeshLambertMaterial,
  DoubleSide,
  Mesh,
  WebGLRenderer,
  Vector3,
  Raycaster,
  Vector2,
  Vector2,
  Vector2,
  BoxGeometry,
  Scene,
  Color,
  PerspectiveCamera,
  AmbientLight,
  SpotLight,
  PlaneGeometry,
  ShadowMaterial,
  Mesh,
  GridHelper,
  WebGLRenderer,
  BufferGeometry,
  BufferAttribute,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  CatmullRomCurve3,
  Line,
  LineBasicMaterial,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  MeshLambertMaterial,
  Mesh,
  Vector3,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  FogExp2,
  PlaneGeometry,
  CanvasTexture,
  ClampToEdgeWrapping,
  ClampToEdgeWrapping,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  Vector3,
  Vector3,
  Cache,
  PerspectiveCamera,
  Vector3,
  Scene,
  Color,
  Fog,
  DirectionalLight,
  PointLight,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Group,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  WebGLRenderer,
  FontLoader,
  TextGeometry,
  Mesh,
  Mesh,
  PerspectiveCamera,
  Scene,
  Color,
  FontLoader,
  LineBasicMaterial,
  DoubleSide,
  MeshBasicMaterial,
  DoubleSide,
  ShapeGeometry,
  Mesh,
  Object3D,
  BufferGeometry,
  Line,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  FontLoader,
  Color,
  MeshBasicMaterial,
  DoubleSide,
  MeshBasicMaterial,
  DoubleSide,
  ShapeGeometry,
  Mesh,
  Group,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  PointLight,
  PointLightHelper,
  GridHelper,
  PolarGridHelper,
  Group,
  BoxHelper,
  WireframeGeometry,
  LineSegments,
  BoxHelper,
  EdgesGeometry,
  LineSegments,
  BoxHelper,
  BoxHelper,
  BoxHelper,
  Vector3,
  Euler,
  Quaternion,
  Vector3,
  BufferGeometryLoader,
  MeshNormalMaterial,
  Matrix4,
  InstancedMesh,
  Matrix4,
  Mesh,
  Matrix4,
  Mesh,
  PerspectiveCamera,
  WebGLRenderer,
  sRGBEncoding,
  Scene,
  Color,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  BufferGeometry,
  Color,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  BufferAttribute,
  BufferAttribute,
  BufferAttribute,
  MeshPhongMaterial,
  DoubleSide,
  Mesh,
  Raycaster,
  Vector2,
  BufferGeometry,
  BufferAttribute,
  LineBasicMaterial,
  Line,
  WebGLRenderer,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Vector2,
  Vector3,
  PerspectiveCamera,
  Scene,
  Color,
  Scene,
  WebGLRenderTarget,
  AmbientLight,
  SpotLight,
  MeshBasicMaterial,
  MeshPhongMaterial,
  Float32BufferAttribute,
  Matrix4,
  Quaternion,
  Color,
  BoxGeometry,
  Vector3,
  Euler,
  Vector3,
  Mesh,
  Mesh,
  Mesh,
  BoxGeometry,
  MeshLambertMaterial,
  WebGLRenderer,
  Vector2,
  OrthographicCamera,
  Scene,
  Color,
  DirectionalLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  BufferGeometry,
  Vector3,
  Vector3,
  Float32BufferAttribute,
  Object3D,
  LineBasicMaterial,
  Line,
  LineSegments,
  Raycaster,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Scene,
  PerspectiveCamera,
  BoxGeometry,
  Color,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  ShaderMaterial,
  Color,
  TextureLoader,
  Points,
  WebGLRenderer,
  Raycaster,
  Vector2,
  Vector2,
  Matrix4,
  BufferGeometry,
  BufferAttribute,
  BufferAttribute,
  PointsMaterial,
  Points,
  BufferAttribute,
  PointsMaterial,
  Points,
  BufferAttribute,
  PointsMaterial,
  Points,
  Scene,
  Clock,
  PerspectiveCamera,
  Color,
  Color,
  Color,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  Raycaster,
  PerspectiveCamera,
  Scene,
  Color,
  BoxGeometry,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  MeshLambertMaterial,
  TextureLoader,
  GridHelper,
  Raycaster,
  Vector2,
  PlaneGeometry,
  Mesh,
  MeshBasicMaterial,
  AmbientLight,
  DirectionalLight,
  WebGLRenderer,
  Mesh,
  PerspectiveCamera,
  Scene,
  Color,
  PointLight,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  HemisphereLight,
  HemisphereLightHelper,
  DirectionalLight,
  DirectionalLightHelper,
  PlaneGeometry,
  MeshLambertMaterial,
  Mesh,
  Color,
  Color,
  SphereGeometry,
  ShaderMaterial,
  BackSide,
  Mesh,
  AnimationMixer,
  WebGLRenderer,
  sRGBEncoding,
  Clock,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PerspectiveCamera,
  Color,
  Vector3,
  CatmullRomCurve3,
  Vector3,
  Color,
  Line,
  BufferGeometry,
  LineBasicMaterial,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  LineBasicMaterial,
  LineDashedMaterial,
  Line,
  PerspectiveCamera,
  Vector3,
  Scene,
  Color,
  Fog,
  DirectionalLight,
  PointLight,
  MeshPhongMaterial,
  Group,
  Font,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  WebGLRenderer,
  TextGeometry,
  Mesh,
  Mesh,
  Vector3,
  Scene,
  Color,
  PerspectiveCamera,
  DirectionalLight,
  DirectionalLight,
  Group,
  WebGLRenderer,
  BoxGeometry,
  IcosahedronGeometry,
  Vector3,
  Color,
  MeshPhongMaterial,
  Mesh,
  Vector3,
  Vector3,
  Mesh,
  MeshPhongMaterial,
  PerspectiveCamera,
  WebGLRenderer,
  ACESFilmicToneMapping,
  PMREMGenerator,
  Scene,
  Color,
  Box3,
  Vector3,
  Vector3,
  Clock,
  PerspectiveCamera,
  Scene,
  Fog,
  PointLight,
  DirectionalLight,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  IcosahedronGeometry,
  MeshLambertMaterial,
  LOD,
  Mesh,
  WebGLRenderer,
  TextureLoader,
  PerspectiveCamera,
  Scene,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  MeshBasicMaterial,
  Mesh,
  PlaneGeometry,
  NoBlending,
  NormalBlending,
  AdditiveBlending,
  SubtractiveBlending,
  MultiplyBlending,
  PlaneGeometry,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  WebGLRenderer,
  CanvasTexture,
  MeshBasicMaterial,
  PerspectiveCamera,
  Scene,
  TextureLoader,
  CanvasTexture,
  RepeatWrapping,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  MeshBasicMaterial,
  Mesh,
  PlaneGeometry,
  ZeroFactor,
  OneFactor,
  SrcColorFactor,
  OneMinusSrcColorFactor,
  SrcAlphaFactor,
  OneMinusSrcAlphaFactor,
  DstAlphaFactor,
  OneMinusDstAlphaFactor,
  DstColorFactor,
  OneMinusDstColorFactor,
  SrcAlphaSaturateFactor,
  ZeroFactor,
  OneFactor,
  SrcColorFactor,
  OneMinusSrcColorFactor,
  SrcAlphaFactor,
  OneMinusSrcAlphaFactor,
  DstAlphaFactor,
  OneMinusDstAlphaFactor,
  DstColorFactor,
  OneMinusDstColorFactor,
  PlaneGeometry,
  PlaneGeometry,
  MeshBasicMaterial,
  CustomBlending,
  AddEquation,
  Mesh,
  Mesh,
  Mesh,
  WebGLRenderer,
  AddEquation,
  SubtractEquation,
  ReverseSubtractEquation,
  MinEquation,
  MaxEquation,
  CanvasTexture,
  MeshBasicMaterial,
  FrontSide,
  BackSide,
  DoubleSide,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  OrthographicCamera,
  AmbientLight,
  PointLight,
  PointLight,
  PointLight,
  TextureLoader,
  MeshStandardMaterial,
  Vector2,
  DoubleSide,
  MeshDepthMaterial,
  BasicDepthPacking,
  DoubleSide,
  MeshDepthMaterial,
  RGBADepthPacking,
  DoubleSide,
  MeshNormalMaterial,
  Vector2,
  DoubleSide,
  Mesh,
  FrontSide,
  BackSide,
  DoubleSide,
  CubeTextureLoader,
  LinearMipMapLinearFilter,
  LinearFilter,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  WebGLRenderer,
  ACESFilmicToneMapping,
  TorusKnotGeometry,
  SphereGeometry,
  MeshStandardMaterial,
  Mesh,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  DefaultLoadingManager,
  UnsignedByteType,
  LinearFilter,
  CubeTextureLoader,
  sRGBEncoding,
  RGBM16Encoding,
  PMREMGenerator,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  DirectionalLight,
  Color,
  Color,
  SphereGeometry,
  ShaderMaterial,
  BackSide,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  ObjectLoader,
  PerspectiveCamera,
  Scene,
  Group,
  SphereGeometry,
  TextureLoader,
  sRGBEncoding,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  MeshPhysicalMaterial,
  Vector2,
  Mesh,
  MeshPhysicalMaterial,
  Mesh,
  MeshPhysicalMaterial,
  Vector2,
  Mesh,
  MeshPhysicalMaterial,
  Vector2,
  Vector2,
  Mesh,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  WebGLRenderer,
  ACESFilmicToneMapping,
  sRGBEncoding,
  EquirectangularReflectionMapping,
  WebGLRenderer,
  ACESFilmicToneMapping,
  sRGBEncoding,
  Scene,
  PerspectiveCamera,
  SphereGeometry,
  CanvasTexture,
  NearestFilter,
  RepeatWrapping,
  RepeatWrapping,
  MeshPhysicalMaterial,
  DoubleSide,
  Mesh,
  WebGLRenderer,
  sRGBEncoding,
  ReinhardToneMapping,
  Scene,
  PerspectiveCamera,
  HemisphereLight,
  MeshStandardMaterial,
  TextureLoader,
  sRGBEncoding,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  RepeatWrapping,
  EquirectangularReflectionMapping,
  Vector2,
  PerspectiveCamera,
  Scene,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  WebGLRenderer,
  CanvasTexture,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Scene,
  Color,
  Fog,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  NearestFilter,
  NearestFilter,
  MeshBasicMaterial,
  MeshBasicMaterial,
  PlaneGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  Mesh,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
  TextureLoader,
  Texture,
  MeshBasicMaterial,
  MeshBasicMaterial,
  NearestFilter,
  LinearFilter,
  UVMapping,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Scene,
  Color,
  Fog,
  CanvasTexture,
  RepeatWrapping,
  RepeatWrapping,
  NearestFilter,
  NearestMipmapNearestFilter,
  MeshBasicMaterial,
  MeshBasicMaterial,
  PlaneGeometry,
  Mesh,
  Mesh,
  PlaneGeometry,
  Mesh,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
  TextureLoader,
  Texture,
  MeshBasicMaterial,
  MeshBasicMaterial,
  NearestFilter,
  LinearFilter,
  UVMapping,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  DirectionalLight,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  PointLight,
  WebGLRenderer,
  sRGBEncoding,
  TextureLoader,
  RepeatWrapping,
  UniformsUtils,
  Vector3,
  Vector3,
  ShaderMaterial,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  BufferGeometryLoader,
  MeshBasicMaterial,
  Mesh,
  ShaderMaterial,
  DoubleSide,
  Mesh,
  Vector3,
  Vector3,
  Vector3,
  BufferAttribute,
  Vector2,
  PerspectiveCamera,
  Scene,
  Color,
  Clock,
  Raycaster,
  HemisphereLight,
  Vector3,
  BoxGeometry,
  Mesh,
  MeshLambertMaterial,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderer,
  Vector3,
  Spherical,
  Matrix4,
  Quaternion,
  Clock,
  PerspectiveCamera,
  Scene,
  ConeGeometry,
  MeshNormalMaterial,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  CircleGeometry,
  PlaneGeometry,
  Object3D,
  CylinderGeometry,
  MeshPhongMaterial,
  Mesh,
  SphereGeometry,
  Mesh,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  Plane,
  Vector3,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  PerspectiveCamera,
  CameraHelper,
  Vector3,
  Vector3,
  Vector3,
  Vector3,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  Mesh,
  MeshBasicMaterial,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  DirectionalLight,
  AnimationMixer,
  WebGLRenderer,
  sRGBEncoding,
  MathUtils,
  MathUtils,
  BoxGeometry,
  SphereGeometry,
  DodecahedronGeometry,
  CylinderGeometry,
  Scene,
  PerspectiveCamera,
  MeshStandardMaterial,
  Color,
  Mesh,
  HemisphereLight,
  DirectionalLight,
  WebGLRenderer,
  WebGLRenderer,
  Scene,
  Color,
  BufferGeometry,
  BufferGeometry,
  Float32BufferAttribute,
  Float32BufferAttribute,
  CanvasTexture,
  PointsMaterial,
  Points,
  PerspectiveCamera,
  Vector3,
  Vector3,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  MeshBasicMaterial,
  Mesh,
  BoxGeometry,
  Texture,
  ImageLoader,
  PerspectiveCamera,
  Scene,
  SphereGeometry,
  TextureLoader,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  MathUtils,
  MathUtils,
  MathUtils,
  PerspectiveCamera,
  Scene,
  FogExp2,
  BufferGeometry,
  TextureLoader,
  Float32BufferAttribute,
  PointsMaterial,
  Points,
  WebGLRenderer,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  FogExp2,
  WebGLRenderer,
  Object3D,
  Points,
  PlaneGeometry,
  PointsMaterial,
  BufferAttribute,
  BufferGeometry,
  DynamicDrawUsage,
  Points,
  PointsMaterial,
  PerspectiveCamera,
  Scene,
  FogExp2,
  BufferGeometry,
  TextureLoader,
  Float32BufferAttribute,
  PointsMaterial,
  AdditiveBlending,
  Points,
  WebGLRenderer,
  Points,
  PerspectiveCamera,
  Scene,
  BufferGeometry,
  BufferAttribute,
  BufferAttribute,
  ShaderMaterial,
  Color,
  Points,
  WebGLRenderer,
  OrthographicCamera,
  Scene,
  Scene,
  DirectionalLight,
  DirectionalLight,
  WebGLRenderTarget,
  LinearFilter,
  NearestFilter,
  RGBAFormat,
  FloatType,
  ShaderMaterial,
  ShaderMaterial,
  PlaneGeometry,
  Mesh,
  TorusGeometry,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  Mesh,
  WebGLRenderer,
  Clock,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  TextureLoader,
  RepeatWrapping,
  IcosahedronGeometry,
  MeshPhongMaterial,
  Mesh,
  PlaneGeometry,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  PointLight,
  PointLight,
  PointLight,
  PointLight,
  PerspectiveCamera,
  OrthographicCamera,
  Scene,
  Scene,
  Scene,
  DirectionalLight,
  DirectionalLight,
  WebGLRenderTarget,
  LinearFilter,
  NearestFilter,
  RGBFormat,
  ShaderMaterial,
  ShaderMaterial,
  PlaneGeometry,
  Mesh,
  TorusGeometry,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Mesh,
  Mesh,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  Mesh,
  WebGLRenderer,
  WebGLRenderer,
  ACESFilmicToneMapping,
  Scene,
  PerspectiveCamera,
  Vector3,
  PlaneGeometry,
  TextureLoader,
  RepeatWrapping,
  Vector3,
  PMREMGenerator,
  MathUtils,
  MathUtils,
  BoxGeometry,
  MeshStandardMaterial,
  Mesh,
  Vector3,
  MathUtils,
  MathUtils,
  PerspectiveCamera,
  Scene,
  GridHelper,
  WebGLRenderer,
  sRGBEncoding,
  ACESFilmicToneMapping,
  PerspectiveCamera,
  PerspectiveCamera,
  OrthographicCamera,
  Scene,
  Scene,
  Scene,
  AmbientLight,
  DirectionalLight,
  BackSide,
  AdditiveBlending,
  UniformsUtils,
  UniformsLib,
  UniformsLib,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderChunk,
  ShaderMaterial,
  MeshPhongMaterial,
  TextureLoader,
  sRGBEncoding,
  sRGBEncoding,
  sRGBEncoding,
  MeshBasicMaterial,
  AdditiveBlending,
  sRGBEncoding,
  MeshLambertMaterial,
  NormalBlending,
  SphereGeometry,
  Mesh,
  Mesh,
  Mesh,
  Mesh,
  ShaderMaterial,
  NoBlending,
  ShaderMaterial,
  NoBlending,
  Mesh,
  PlaneGeometry,
  Mesh,
  PlaneGeometry,
  CubeTextureLoader,
  sRGBEncoding,
  WebGLRenderer,
  LinearFilter,
  LinearFilter,
  RGBAFormat,
  WebGLRenderTarget,
  FloatType,
  WebGLRenderTarget,
  Clock,
  PerspectiveCamera,
  Scene,
  Fog,
  WebGLCubeRenderTarget,
  RGBFormat,
  LinearMipmapLinearFilter,
  sRGBEncoding,
  CubeCamera,
  TextureLoader,
  RepeatWrapping,
  NearestFilter,
  sRGBEncoding,
  RepeatWrapping,
  sRGBEncoding,
  RepeatWrapping,
  sRGBEncoding,
  MeshPhongMaterial,
  PlaneGeometry,
  Mesh,
  MeshPhongMaterial,
  MeshPhongMaterial,
  MeshPhongMaterial,
  SphereGeometry,
  TorusGeometry,
  BoxGeometry,
  MeshPhongMaterial,
  Mesh,
  BoxGeometry,
  BoxGeometry,
  BoxGeometry,
  BoxGeometry,
  BoxGeometry,
  SphereGeometry,
  AnimationMixer,
  AmbientLight,
  PointLight,
  DirectionalLight,
  CameraHelper,
  WebGLRenderer,
  PCFSoftShadowMap,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  Color,
  BoxGeometry,
  IcosahedronGeometry,
  TorusKnotGeometry,
  MeshNormalMaterial,
  Mesh,
  Group,
  WebGLRenderTarget,
  WebGLRenderTarget,
  PlaneGeometry,
  MeshBasicMaterial,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  OrthographicCamera,
  CameraHelper,
  MeshDepthMaterial,
  ShaderMaterial,
  ShaderMaterial,
  Color,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  AmbientLight,
  SpotLight,
  CameraHelper,
  DirectionalLight,
  CameraHelper,
  TorusKnotGeometry,
  MeshPhongMaterial,
  Mesh,
  BoxGeometry,
  Mesh,
  BoxGeometry,
  MeshPhongMaterial,
  Mesh,
  WebGLRenderer,
  BasicShadowMap,
  Clock,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Clock,
  PlaneGeometry,
  MeshPhongMaterial,
  Mesh,
  GridHelper,
  HemisphereLight,
  DirectionalLight,
  AnimationMixer,
  WebGLRenderer,
  NoToneMapping,
  LinearToneMapping,
  ReinhardToneMapping,
  CineonToneMapping,
  ACESFilmicToneMapping,
  CustomToneMapping,
  WebGLRenderer,
  sRGBEncoding,
  ShaderChunk,
  ShaderChunk,
  Scene,
  PerspectiveCamera,
  EquirectangularReflectionMapping,
  Clock,
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  TextureLoader,
  RepeatWrapping,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Fog,
  BoxGeometry,
  MeshNormalMaterial,
  Mesh,
  PerspectiveCamera,
  Scene,
  WebGLRenderer,
  CubeTextureLoader,
  MeshBasicMaterial,
  SphereGeometry,
  Mesh,
  Mesh,
  MeshBasicMaterial,
  Vector2,
  Raycaster,
  Vector3,
  PerspectiveCamera,
  Scene,
  WebGLRenderer,
  ShaderMaterial,
  CubeTextureLoader,
  PlaneGeometry,
  MeshPhongMaterial,
  DoubleSide,
  Mesh,
  BufferGeometryLoader,
  MeshPhongMaterial,
  Mesh,
  SphereGeometry,
  MeshPhongMaterial,
  Mesh,
  AmbientLight,
  DirectionalLight,
  DirectionalLight,
  Scene,
  OrthographicCamera,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  WebGLRenderTarget,
  WebGLRenderTarget,
  UniformsUtils,
  ShaderMaterial,
  Mesh,
  PlaneGeometry,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Clock,
  HemisphereLight,
  DirectionalLight,
  Group,
  TetrahedronGeometry,
  MeshStandardMaterial,
  Mesh,
  WebGLRenderer,
  Vector3,
  Vector4,
  Vector3,
  PerspectiveCamera,
  Scene,
  MeshDepthMaterial,
  MeshBasicMaterial,
  SphereGeometry,
  Mesh,
  WebGLRenderer,
  Scene,
  OrthographicCamera,
  LinearFilter,
  LinearFilter,
  RGBFormat,
  WebGLRenderTarget,
  WebGLRenderTarget,
  WebGLRenderTarget,
  WebGLRenderTarget,
  WebGLRenderTarget,
  UniformsUtils,
  ShaderMaterial,
  UniformsUtils,
  ShaderMaterial,
  UniformsUtils,
  ShaderMaterial,
  UniformsUtils,
  ShaderMaterial,
  Mesh,
  PlaneGeometry,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  Fog,
  Group,
  DirectionalLight,
  Mesh,
  PlaneBufferGeometry,
  MeshPhongMaterial,
  MeshPhongMaterial,
  Group,
  LoadingManager,
  WebGLRenderer,
  PerspectiveCamera,
  OrthographicCamera,
  MathUtils,
  Scene,
  Group,
  PointLight,
  PointLight,
  PointLight,
  AmbientLight,
  SphereGeometry,
  MeshStandardMaterial,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Object3D,
  PointLight,
  PointLight,
  PointLight,
  AmbientLight,
  SphereGeometry,
  MeshStandardMaterial,
  Mesh,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  BoxGeometry,
  MeshBasicMaterial,
  Mesh,
  TextureLoader,
  MeshBasicMaterial,
  Mesh,
  Scene,
  PerspectiveCamera,
  TorusKnotGeometry,
  MeshPhongMaterial,
  Mesh,
  AmbientLight,
  PointLight,
  WebGLRenderer,
  WebGLRenderer,
  PerspectiveCamera,
  Scene,
  Color,
  DirectionalLight,
  HemisphereLight,
  Group,
  BoxGeometry,
  MeshLambertMaterial,
  Mesh,
  Clock,
  WebGLRenderer,
  ReinhardToneMapping,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  PointLight,
  Vector2,
  AnimationMixer,
  Layers,
  MeshBasicMaterial,
  WebGLRenderer,
  ReinhardToneMapping,
  Scene,
  PerspectiveCamera,
  AmbientLight,
  Vector2,
  ShaderMaterial,
  Raycaster,
  Vector2,
  IcosahedronGeometry,
  Color,
  MeshBasicMaterial,
  Mesh,
  PerspectiveCamera,
  Scene,
  EquirectangularReflectionMapping,
  WebGLRenderer,
  ACESFilmicToneMapping,
  WebGLRenderTarget,
  LinearFilter,
  LinearFilter,
  RGBAFormat,
  sRGBEncoding,
  PerspectiveCamera,
  Scene,
  Mesh,
  Mesh,
  WebGLRenderer,
  MeshNormalMaterial,
  Scene,
  Color,
  PerspectiveCamera,
  OrthographicCamera,
  WebGLRenderer,
  PCFSoftShadowMap,
  Vector3,
  AmbientLight,
  Vector3,
  MeshPhongMaterial,
  Mesh,
  PlaneGeometry,
  MeshPhongMaterial,
  MeshPhongMaterial,
  BoxGeometry,
  Mesh,
  Mesh,
  Scene,
  Fog,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  CameraHelper,
  Group,
  SphereGeometry,
  MeshPhongMaterial,
  Mesh,
  MeshPhongMaterial,
  Mesh,
  PlaneGeometry,
  Mesh,
  BoxGeometry,
  ShaderChunk,
  ShaderChunk,
  WebGLRenderer,
  sRGBEncoding,
  Mesh,
  PerspectiveCamera,
  WebGLRenderTarget,
  Matrix3,
  Vector3,
  Vector3,
  BufferAttribute,
  DynamicDrawUsage,
  PerspectiveCamera,
  Scene,
  TorusKnotGeometry,
  MeshBasicMaterial,
  MeshBasicMaterial,
  BackSide,
  BoxGeometry,
  Mesh,
  WebGLRenderer,
  ShaderChunk,
  ShaderChunk,
  DataTexture,
  RGBAFormat,
  FloatType,
  DataTexture,
  Vector3,
  Vector3,
  PerspectiveCamera,
  Scene,
  Color,
  WebGLRenderer,
  NoToneMapping,
  WebGLRenderTarget,
  AmbientLight,
  PointLight,
  Vector2,
  SphereGeometry,
  Group,
  ShaderLib,
  ShaderMaterial,
  UniformsUtils,
  Mesh,
  FrontSide,
  DoubleSide,
  Color,
  Group,
  Mesh,
  MeshBasicMaterial,
  Mesh,
  MeshBasicMaterial,
} from "three";

import Stats from "three/examples/jsm/libs/stats.module.js";

import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
import { OBJLoader } from "three/examples/jsm/loaders/OBJLoader.js";

import { UnrealBloomPass } from "three/examples/jsm/postprocessing/UnrealBloomPass.js";

// Simple form of tiled forward lighting
// using texels as bitmasks of 32 lights

const RADIUS = 75;

ShaderChunk["lights_pars_begin"] += [
  "",
  "#if defined TILED_FORWARD",
  "uniform vec4 tileData;",
  "uniform sampler2D tileTexture;",
  "uniform sampler2D lightTexture;",
  "#endif",
].join("\n");

ShaderChunk["lights_fragment_end"] += [
  "",
  "#if defined TILED_FORWARD",
  "vec2 tUv = floor(gl_FragCoord.xy / tileData.xy * 32.) / 32. + tileData.zw;",
  "vec4 tile = texture2D(tileTexture, tUv);",
  "for (int i=0; i < 4; i++) {",
  "	float tileVal = tile.x * 255.;",
  "  	tile.xyzw = tile.yzwx;",
  "	if(tileVal == 0.){ continue; }",
  "  	float tileDiv = 128.;",
  "	for (int j=0; j < 8; j++) {",
  "  		if (tileVal < tileDiv) {  tileDiv *= 0.5; continue; }",
  "		tileVal -= tileDiv;",
  "		tileDiv *= 0.5;",
  "  		PointLight pointlight;",
  "		float uvx = (float(8 * i + j) + 0.5) / 32.;",
  "  		vec4 lightData = texture2D(lightTexture, vec2(uvx, 0.));",
  "  		vec4 lightColor = texture2D(lightTexture, vec2(uvx, 1.));",
  "  		pointlight.position = lightData.xyz;",
  "  		pointlight.distance = lightData.w;",
  "  		pointlight.color = lightColor.rgb;",
  "  		pointlight.decay = lightColor.a;",
  "  		getPointLightInfo( pointlight, geometry, directLight );",
  "		RE_Direct( directLight, geometry, material, reflectedLight );",
  "	}",
  "}",
  "#endif",
].join("\n");

const lights = [];

const State = {
  rows: 0,
  cols: 0,
  width: 0,
  height: 0,
  tileData: { value: null },
  tileTexture: { value: null },
  lightTexture: {
    value: new DataTexture(
      new Float32Array(32 * 2 * 4),
      32,
      2,
      RGBAFormat,
      FloatType
    ),
  },
};

function resizeTiles() {
  const width = window.innerWidth;
  const height = window.innerHeight;

  State.width = width;
  State.height = height;
  State.cols = Math.ceil(width / 32);
  State.rows = Math.ceil(height / 32);
  State.tileData.value = [
    width,
    height,
    0.5 / Math.ceil(width / 32),
    0.5 / Math.ceil(height / 32),
  ];
  State.tileTexture.value = new DataTexture(
    new Uint8Array(State.cols * State.rows * 4),
    State.cols,
    State.rows
  );
}

// Generate the light bitmasks and store them in the tile texture
function tileLights(renderer, scene, camera) {
  if (!camera.projectionMatrix) return;

  const d = State.tileTexture.value.image.data;
  const ld = State.lightTexture.value.image.data;

  const viewMatrix = camera.matrixWorldInverse;

  d.fill(0);

  const vector = new Vector3();

  lights.forEach(function (light, index) {
    vector.setFromMatrixPosition(light.matrixWorld);

    const bs = lightBounds(camera, vector, light._light.radius);

    vector.applyMatrix4(viewMatrix);
    vector.toArray(ld, 4 * index);
    ld[4 * index + 3] = light._light.radius;
    light._light.color.toArray(ld, 32 * 4 + 4 * index);
    ld[32 * 4 + 4 * index + 3] = light._light.decay;

    if (bs[1] < 0 || bs[0] > State.width || bs[3] < 0 || bs[2] > State.height)
      return;
    if (bs[0] < 0) bs[0] = 0;
    if (bs[1] > State.width) bs[1] = State.width;
    if (bs[2] < 0) bs[2] = 0;
    if (bs[3] > State.height) bs[3] = State.height;

    const i4 = Math.floor(index / 8),
      i8 = 7 - (index % 8);

    for (let i = Math.floor(bs[2] / 32); i <= Math.ceil(bs[3] / 32); i++) {
      for (let j = Math.floor(bs[0] / 32); j <= Math.ceil(bs[1] / 32); j++) {
        d[(State.cols * i + j) * 4 + i4] |= 1 << i8;
      }
    }
  });

  State.tileTexture.value.needsUpdate = true;
  State.lightTexture.value.needsUpdate = true;
}

// Screen rectangle bounds from light sphere's world AABB
const lightBounds = (function () {
  const v = new Vector3();
  return function (camera, pos, r) {
    let minX = State.width,
      maxX = 0,
      minY = State.height,
      maxY = 0;
    const hw = State.width / 2,
      hh = State.height / 2;

    for (let i = 0; i < 8; i++) {
      v.copy(pos);
      v.x += i & 1 ? r : -r;
      v.y += i & 2 ? r : -r;
      v.z += i & 4 ? r : -r;
      const vector = v.project(camera);
      const x = vector.x * hw + hw;
      const y = vector.y * hh + hh;
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
    }

    return [minX, maxX, minY, maxY];
  };
})();

// Rendering

const container = document.createElement("div");
document.body.appendChild(container);
const camera = new PerspectiveCamera(
  40,
  window.innerWidth / window.innerHeight,
  1,
  2000
);
camera.position.set(0.0, 0.0, 240.0);
const scene = new Scene();
scene.background = new Color(0x111111);

const renderer = new WebGLRenderer();
renderer.toneMapping = NoToneMapping;
container.appendChild(renderer.domElement);

const renderTarget = new WebGLRenderTarget();

scene.add(new AmbientLight(0xffffff, 0.33));
// At least one regular Pointlight is needed to activate light support
scene.add(new PointLight(0xff0000, 0.1, 0.1));

const bloom = new UnrealBloomPass(
  new Vector2(window.innerWidth, window.innerHeight),
  0.8,
  0.6,
  0.8
);
bloom.renderToScreen = true;

const stats = new Stats();
container.appendChild(stats.dom);

const controls = new OrbitControls(camera, renderer.domElement);
controls.minDistance = 120;
controls.maxDistance = 320;

const materials = [];

const Heads = [
  {
    type: "physical",
    uniforms: { diffuse: 0x888888, metalness: 1.0, roughness: 0.66 },
    defines: {},
  },
  {
    type: "standard",
    uniforms: { diffuse: 0x666666, metalness: 0.1, roughness: 0.33 },
    defines: {},
  },
  {
    type: "phong",
    uniforms: { diffuse: 0x777777, shininess: 20 },
    defines: {},
  },
  {
    type: "phong",
    uniforms: { diffuse: 0x555555, shininess: 10 },
    defines: { TOON: 1 },
  },
];

function init(geom) {
  const sphereGeom = new SphereGeometry(0.5, 32, 32);
  const tIndex = Math.round(Math.random() * 3);

  Object.keys(Heads).forEach(function (t, index) {
    let g = new Group();
    const conf = Heads[t];
    const ml = ShaderLib[conf.type];
    const mtl = new ShaderMaterial({
      lights: true,
      fragmentShader: ml.fragmentShader,
      vertexShader: ml.vertexShader,
      uniforms: UniformsUtils.clone(ml.uniforms),
      defines: conf.defines,
      transparent: tIndex === index ? true : false,
    });

    mtl.extensions.derivatives = true;

    mtl.uniforms["opacity"].value = tIndex === index ? 0.9 : 1;
    mtl.uniforms["tileData"] = State.tileData;
    mtl.uniforms["tileTexture"] = State.tileTexture;
    mtl.uniforms["lightTexture"] = State.lightTexture;

    for (const u in conf.uniforms) {
      const vu = conf.uniforms[u];

      if (mtl.uniforms[u].value.set) {
        mtl.uniforms[u].value.set(vu);
      } else {
        mtl.uniforms[u].value = vu;
      }
    }

    mtl.defines["TILED_FORWARD"] = 1;
    materials.push(mtl);

    const obj = new Mesh(geom, mtl);
    obj.position.y = -37;
    mtl.side = tIndex === index ? FrontSide : DoubleSide;

    g.rotation.y = (index * Math.PI) / 2;
    g.position.x = Math.sin((index * Math.PI) / 2) * RADIUS;
    g.position.z = Math.cos((index * Math.PI) / 2) * RADIUS;
    g.add(obj);

    for (let i = 0; i < 8; i++) {
      const color = new Color().setHSL(Math.random(), 1.0, 0.5);
      const l = new Group();

      l.add(
        new Mesh(
          sphereGeom,
          new MeshBasicMaterial({
            color: color,
          })
        )
      );

      l.add(
        new Mesh(
          sphereGeom,
          new MeshBasicMaterial({
            color: color,
            transparent: true,
            opacity: 0.033,
          })
        )
      );

      l.children[1].scale.set(6.66, 6.66, 6.66);

      l._light = {
        color: color,
        radius: RADIUS,
        decay: 1,
        sy: Math.random(),
        sr: Math.random(),
        sc: Math.random(),
        py: Math.random() * Math.PI,
        pr: Math.random() * Math.PI,
        pc: Math.random() * Math.PI,
        dir: Math.random() > 0.5 ? 1 : -1,
      };

      lights.push(l);
      g.add(l);
    }

    scene.add(g);
  });
}

function update(now) {
  lights.forEach(function (l) {
    const ld = l._light;
    const radius = 0.8 + 0.2 * Math.sin(ld.pr + (0.6 + 0.3 * ld.sr) * now);
    l.position.x =
      Math.sin(ld.pc + (0.8 + 0.2 * ld.sc) * now * ld.dir) * radius * RADIUS;
    l.position.z =
      Math.cos(ld.pc + (0.8 + 0.2 * ld.sc) * now * ld.dir) * radius * RADIUS;
    l.position.y = Math.sin(ld.py + (0.8 + 0.2 * ld.sy) * now) * radius * 32;
  });
}

function onWindowResize() {
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderTarget.setSize(window.innerWidth, window.innerHeight);
  bloom.setSize(window.innerWidth, window.innerHeight);
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  resizeTiles();
}

function postEffect(renderer) {
  bloom.render(renderer, null, renderTarget);
}

scene.onBeforeRender = tileLights;

scene.onAfterRender = postEffect;

const loader = new OBJLoader();

loader.load("models/obj/walt/WaltHead.obj", function (object) {
  const geometry = object.children[0].geometry;

  window.addEventListener("resize", onWindowResize);

  init(geometry);
  onWindowResize();

  renderer.setAnimationLoop(function (time) {
    update(time / 1000);
    stats.begin();
    renderer.setRenderTarget(renderTarget);
    renderer.render(scene, camera);
    stats.end();
  });
});
